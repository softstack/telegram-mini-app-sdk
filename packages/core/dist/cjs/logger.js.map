{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location, getLocationFromError } from 'get-current-line';\n\nexport type LogChannel = 'debug' | 'error' | 'info' | 'verbose' | 'warning';\n\nexport class Logger<T extends string = LogChannel> {\n\tconstructor(activeChannels: Array<LogChannel | T> = []) {\n\t\tfor (const channel of activeChannels) {\n\t\t\tthis.setChannelActive(channel, true);\n\t\t}\n\t}\n\n\tprivate _activeChannels = new Set<LogChannel | T>();\n\n\tsetChannelActive(channel: LogChannel | T, active: boolean): void {\n\t\tif (active) {\n\t\t\tthis._activeChannels.add(channel);\n\t\t} else {\n\t\t\tthis._activeChannels.delete(channel);\n\t\t}\n\t}\n\n\tisChannelActive(channel: LogChannel | T): boolean {\n\t\treturn this._activeChannels.has(channel);\n\t}\n\n\tgetActiveChannels(): Array<LogChannel | T> {\n\t\treturn [...this._activeChannels];\n\t}\n\n\tlog(logChannel: LogChannel | T, ...optionalParameters: unknown[]): void {\n\t\tif (this.isChannelActive(logChannel)) {\n\t\t\tconst logPrefix = `${new Date().toISOString()} ${logChannel.toUpperCase()}`;\n\t\t\tif (logChannel === 'error') {\n\t\t\t\tconsole.error(logPrefix, ...optionalParameters);\n\t\t\t} else {\n\t\t\t\tconsole.log(logPrefix, ...optionalParameters);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Logs a debug message.\n\t * @param location - The location where the log message originated from.\n\t * @param message - The optional message to be logged.\n\t */\n\tlogDebug = (location: Location, message: unknown, ...optionalParameters: unknown[]): void => {\n\t\tthis.log('debug', `${this._getLocationString(location)}`, message, ...optionalParameters);\n\t};\n\n\t/**\n\t * Logs an error message.\n\t * @param location - The location where the error occurred.\n\t * @param error - The error to be logged.\n\t * @param prefix - An optional prefix for the error message.\n\t */\n\tlogError(\n\t\tlocation: Location,\n\t\terror: unknown,\n\t\toptions?: { prefix?: string; key?: string },\n\t\t...optionalParameters: unknown[]\n\t): void {\n\t\tif (this.isChannelActive('error')) {\n\t\t\tconst errorLocation = getLocationFromError(error as Error);\n\t\t\tconst prefixes = [`${this._getLocationString(location)} -> ${this._getLocationString(errorLocation)}`];\n\t\t\tif (options?.key) {\n\t\t\t\tprefixes.push(options.key);\n\t\t\t}\n\t\t\tif (options?.prefix) {\n\t\t\t\tprefixes.push(options.prefix.trim());\n\t\t\t}\n\t\t\tthis.log('error', ...prefixes, error, ...optionalParameters);\n\t\t}\n\t}\n\n\t/**\n\t * Logs an informational message.\n\t * @param message - The optional message to be logged.\n\t */\n\tlogInfo(message: unknown, ...optionalParameters: unknown[]): void {\n\t\tthis.log('info', message, ...optionalParameters);\n\t}\n\n\tlogVerbose(message: unknown, ...optionalParameters: unknown[]): void {\n\t\tthis.log('verbose', message, ...optionalParameters);\n\t}\n\n\tlogWarning(message: unknown, ...optionalParameters: unknown[]): void {\n\t\tthis.log('warning', message, ...optionalParameters);\n\t}\n\n\tprivate _getLocationString(location: Location): string {\n\t\treturn `${location.file}:${location.line}:${location.method}`;\n\t}\n}\n"]}