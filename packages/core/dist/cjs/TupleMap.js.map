{"version":3,"file":"TupleMap.js","sourceRoot":"","sources":["../../src/TupleMap.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A `TupleMap` is a data structure that allows you to store values associated with a pair of keys.\n * It uses a nested `Map` to achieve this, where the first key maps to another `Map` that maps the second key to the value.\n *\n * @template Key1 - The type of the first key.\n * @template Key2 - The type of the second key.\n * @template Value - The type of the value.\n */\nexport class TupleMap<Key1, Key2, Value> {\n\t/**\n\t * Constructs a new TupleMap instance.\n\t *\n\t * @param entries - An optional array of tuples, where each tuple contains two keys and a value.\n\t *                  The keys and value will be added to the map.\n\t */\n\tconstructor(entries?: Array<[Key1, Key2, Value]>) {\n\t\tif (entries) {\n\t\t\tfor (const [key1, key2, value] of entries) {\n\t\t\t\tthis.set(key1, key2, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A private map that stores a nested map structure.\n\t * The outer map uses keys of type `Key1` and maps to inner maps.\n\t * The inner maps use keys of type `Key2` and map to values of type `Value`.\n\t * This structure allows for a two-level key-value mapping.\n\t */\n\tprivate _map = new Map<Key1, Map<Key2, Value>>();\n\n\t/**\n\t * Sets a value in the tuple map for the given keys.\n\t *\n\t * @param key1 - The first key of the tuple.\n\t * @param key2 - The second key of the tuple.\n\t * @param value - The value to set for the given keys.\n\t * @returns The current instance of the tuple map.\n\t */\n\tset(key1: Key1, key2: Key2, value: Value): this {\n\t\tconst innerMap = this._map.get(key1);\n\t\tif (innerMap) {\n\t\t\tinnerMap.set(key2, value);\n\t\t} else {\n\t\t\tconst newInnerMap = new Map<Key2, Value>();\n\t\t\tnewInnerMap.set(key2, value);\n\t\t\tthis._map.set(key1, newInnerMap);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if the map contains the specified keys.\n\t *\n\t * @param key1 - The first key to check in the map.\n\t * @param key2 - The second key to check in the nested map.\n\t * @returns `true` if the map contains the specified keys, otherwise `false`.\n\t */\n\thas(key1: Key1, key2: Key2): boolean {\n\t\treturn this._map.get(key1)?.has(key2) ?? false;\n\t}\n\n\t/**\n\t * Retrieves the value associated with the specified keys from the tuple map.\n\t *\n\t * @param key1 - The first key of the tuple.\n\t * @param key2 - The second key of the tuple.\n\t * @returns The value associated with the specified keys, or `undefined` if no value is found.\n\t */\n\tget(key1: Key1, key2: Key2): Value | undefined {\n\t\treturn this._map.get(key1)?.get(key2);\n\t}\n\n\t/**\n\t * Deletes the entry associated with the given keys from the map.\n\t *\n\t * @param key1 - The first key of the entry to delete.\n\t * @param key2 - The second key of the entry to delete.\n\t * @returns The current instance of the map.\n\t */\n\tdelete(key1: Key1, key2: Key2): this {\n\t\tconst innerMap = this._map.get(key1);\n\t\tif (innerMap) {\n\t\t\tinnerMap.delete(key2);\n\t\t\tif (innerMap.size === 0) {\n\t\t\t\tthis._map.delete(key1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears all entries in the map.\n\t *\n\t * @returns {this} The current instance for method chaining.\n\t */\n\tclear(): this {\n\t\tfor (const innerMap of this._map.values()) {\n\t\t\tinnerMap.clear();\n\t\t}\n\t\tthis._map.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an iterable iterator of all entries in the TupleMap.\n\t * Each entry is a tuple containing the first key, the second key, and the value.\n\t *\n\t * @returns {IterableIterator<[Key1, Key2, Value]>} An iterable iterator of tuples,\n\t * each containing a key from the outer map, a key from the inner map, and the corresponding value.\n\t */\n\tentries(): IterableIterator<[Key1, Key2, Value]> {\n\t\tconst entries: Array<[Key1, Key2, Value]> = [];\n\t\tfor (const [key1, innerMap] of this._map.entries()) {\n\t\t\tfor (const [key2, value] of innerMap.entries()) {\n\t\t\t\tentries.push([key1, key2, value]);\n\t\t\t}\n\t\t}\n\t\treturn entries[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Returns an iterator that yields tuples of [Key1, Key2, Value].\n\t * This allows the TupleMap to be iterable using the `for...of` syntax.\n\t *\n\t * @returns {IterableIterator<[Key1, Key2, Value]>} An iterator over the entries of the TupleMap.\n\t */\n\t[Symbol.iterator](): IterableIterator<[Key1, Key2, Value]> {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Gets the total number of elements in the TupleMap.\n\t *\n\t * @returns {number} The total number of elements.\n\t */\n\tget size(): number {\n\t\tlet size = 0;\n\t\tfor (const innerMap of this._map.values()) {\n\t\t\tsize += innerMap.size;\n\t\t}\n\t\treturn size;\n\t}\n}\n"]}