{"version":3,"file":"TupleMap.js","sourceRoot":"","sources":["../../src/TupleMap.ts"],"names":[],"mappings":";;;AAAA,MAAa,QAAQ;IAArB;QACS,SAAI,GAAG,IAAI,GAAG,EAA0B,CAAC;IA2DlD,CAAC;IAzDA,GAAG,CAAC,IAAU,EAAE,IAAU,EAAE,KAAY;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE,CAAC;YACd,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3B,CAAC;aAAM,CAAC;YACP,MAAM,WAAW,GAAG,IAAI,GAAG,EAAe,CAAC;YAC3C,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAClC,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,GAAG,CAAC,IAAU,EAAE,IAAU;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC;IAChD,CAAC;IAED,GAAG,CAAC,IAAU,EAAE,IAAU;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,IAAU,EAAE,IAAU;QAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE,CAAC;YACd,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACF,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK;QACJ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO;QACN,MAAM,OAAO,GAA+B,EAAE,CAAC;QAC/C,KAAK,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YACpD,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;gBAChD,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YACnC,CAAC;QACF,CAAC;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACnC,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAED,IAAI,IAAI;QACP,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;YAC3C,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AA5DD,4BA4DC","sourcesContent":["export class TupleMap<Key1, Key2, Value> {\n\tprivate _map = new Map<Key1, Map<Key2, Value>>();\n\n\tset(key1: Key1, key2: Key2, value: Value): this {\n\t\tconst innerMap = this._map.get(key1);\n\t\tif (innerMap) {\n\t\t\tinnerMap.set(key2, value);\n\t\t} else {\n\t\t\tconst newInnerMap = new Map<Key2, Value>();\n\t\t\tnewInnerMap.set(key2, value);\n\t\t\tthis._map.set(key1, newInnerMap);\n\t\t}\n\t\treturn this;\n\t}\n\n\thas(key1: Key1, key2: Key2): boolean {\n\t\treturn this._map.get(key1)?.has(key2) ?? false;\n\t}\n\n\tget(key1: Key1, key2: Key2): Value | undefined {\n\t\treturn this._map.get(key1)?.get(key2);\n\t}\n\n\tdelete(key1: Key1, key2: Key2): this {\n\t\tconst innerMap = this._map.get(key1);\n\t\tif (innerMap) {\n\t\t\tinnerMap.delete(key2);\n\t\t\tif (innerMap.size === 0) {\n\t\t\t\tthis._map.delete(key1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tclear(): this {\n\t\tthis._map.clear();\n\t\treturn this;\n\t}\n\n\tentries(): IterableIterator<[Key1, Key2, Value]> {\n\t\tconst entries: Array<[Key1, Key2, Value]> = [];\n\t\tfor (const [key1, innerMap] of this._map.entries()) {\n\t\t\tfor (const [key2, value] of innerMap.entries()) {\n\t\t\t\tentries.push([key1, key2, value]);\n\t\t\t}\n\t\t}\n\t\treturn entries[Symbol.iterator]();\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[Key1, Key2, Value]> {\n\t\treturn this.entries();\n\t}\n\n\tget size(): number {\n\t\tlet size = 0;\n\t\tfor (const innerMap of this._map.values()) {\n\t\t\tsize += innerMap.size;\n\t\t}\n\t\treturn size;\n\t}\n}\n"]}