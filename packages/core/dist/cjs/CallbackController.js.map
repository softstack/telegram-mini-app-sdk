{"version":3,"file":"CallbackController.js","sourceRoot":"","sources":["../../src/CallbackController.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,MAAa,kBAAkB;IAC9B,YAAY,OAAe;QAKV,eAAU,GAAG,IAAI,GAAG,EAGlC,CAAC;QAPH,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IACzB,CAAC;IAQD;;;;;;;;OAQG;IACH,WAAW,CAAC,EAAM;QACjB,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAChD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YAC7C,UAAU,CAAC,GAAG,EAAE;gBACf,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACzC,IAAI,QAAQ,EAAE,CAAC;oBACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAC3B,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvC,CAAC;YACF,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,eAAe,CAAC,EAAM,EAAE,QAAkB;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,IAAI,QAAQ,EAAE,CAAC;YACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAChD,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAC,EAAM,EAAE,KAAY;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,IAAI,QAAQ,EAAE,CAAC;YACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,EAAM;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;CACD;AA/ED,gDA+EC","sourcesContent":["/**\n * A controller class to manage callback functions with a timeout mechanism.\n *\n * @template Response - The type of the response object.\n * @template Id - The type of the identifier for the callbacks, defaults to string.\n */\nexport class CallbackController<Response, Id = string> {\n\tconstructor(timeout: number) {\n\t\tthis._timeout = timeout;\n\t}\n\n\tprivate readonly _timeout: number;\n\tprivate readonly _callbacks = new Map<\n\t\tId,\n\t\t{ resolve: (response: Response) => void; reject: (error: Error) => void }\n\t>();\n\n\t/**\n\t * Adds a callback with the specified ID to the controller.\n\t * If a callback with the same ID already exists, an error is thrown.\n\t * The callback will be automatically rejected with a timeout error if it is not resolved within the specified timeout period.\n\t *\n\t * @param id - The unique identifier for the callback.\n\t * @returns A promise that resolves with the response or rejects with an error.\n\t * @throws {Error} If a callback with the same ID already exists.\n\t */\n\taddCallback(id: Id): Promise<Response> {\n\t\tif (this._callbacks.has(id)) {\n\t\t\tthrow new Error('Callback already exists');\n\t\t}\n\t\treturn new Promise<Response>((resolve, reject) => {\n\t\t\tthis._callbacks.set(id, { resolve, reject });\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst callback = this._callbacks.get(id);\n\t\t\t\tif (callback) {\n\t\t\t\t\tthis._callbacks.delete(id);\n\t\t\t\t\tcallback.reject(new Error('Timeout'));\n\t\t\t\t}\n\t\t\t}, this._timeout);\n\t\t});\n\t}\n\n\t/**\n\t * Resolves a callback with the given response.\n\t *\n\t * @param id - The unique identifier of the callback to resolve.\n\t * @param response - The response to pass to the callback.\n\t * @returns A boolean indicating whether the callback was successfully resolved.\n\t */\n\tresolveCallback(id: Id, response: Response): boolean {\n\t\tconst callback = this._callbacks.get(id);\n\t\tif (callback) {\n\t\t\tthis._callbacks.delete(id);\n\t\t\tsetTimeout(() => callback.resolve(response), 0);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Rejects a callback with the given error.\n\t *\n\t * @param id - The unique identifier of the callback to reject.\n\t * @param error - The error to reject the callback with.\n\t * @returns A boolean indicating whether the callback was found and rejected.\n\t */\n\trejectCallback(id: Id, error: Error): boolean {\n\t\tconst callback = this._callbacks.get(id);\n\t\tif (callback) {\n\t\t\tthis._callbacks.delete(id);\n\t\t\tsetTimeout(() => callback.reject(error), 0);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes a callback from the internal callback collection.\n\t *\n\t * @param id - The identifier of the callback to be removed.\n\t * @returns A boolean indicating whether the callback was successfully removed.\n\t */\n\tremoveCallback(id: Id): boolean {\n\t\treturn this._callbacks.delete(id);\n\t}\n}\n"]}