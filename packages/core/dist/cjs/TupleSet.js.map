{"version":3,"file":"TupleSet.js","sourceRoot":"","sources":["../../src/TupleSet.ts"],"names":[],"mappings":";;;AAAA,MAAa,QAAQ;IAGpB,YAAY,OAAuB;QAF3B,SAAI,GAAG,IAAI,GAAG,EAAa,CAAC;QAGnC,IAAI,OAAO,EAAE,CAAC;YACb,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,EAAE,CAAC;gBAC9B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChB,CAAC;QACF,CAAC;IACF,CAAC;IAED,GAAG,CAAC,CAAI,EAAE,CAAI;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;QACF,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,GAAG,CAAC,CAAI,EAAE,CAAI;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,CAAI,EAAE,CAAI;QAChB,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC;QACF,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK;QACJ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO;QACN,MAAM,OAAO,GAAkB,EAAE,CAAC;QAClC,KAAK,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YAC7C,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;gBACtB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;QACF,CAAC;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACnC,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAED,IAAI,IAAI;QACP,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;YACvC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AA9DD,4BA8DC","sourcesContent":["export class TupleSet<A, B> {\n\tprivate _map = new Map<A, Set<B>>();\n\n\tconstructor(entries?: Array<[A, B]>) {\n\t\tif (entries) {\n\t\t\tfor (const [a, b] of entries) {\n\t\t\t\tthis.add(a, b);\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(a: A, b: B): this {\n\t\tif (!this.has(a, b)) {\n\t\t\tif (this._map.has(a)) {\n\t\t\t\tthis._map.get(a)?.add(b);\n\t\t\t} else {\n\t\t\t\tthis._map.set(a, new Set([b]));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\thas(a: A, b: B): boolean {\n\t\treturn this._map.get(a)?.has(b) ?? false;\n\t}\n\n\tdelete(a: A, b: B): this {\n\t\tif (this.has(a, b)) {\n\t\t\tthis._map.get(a)?.delete(b);\n\t\t\tif (this._map.get(a)?.size === 0) {\n\t\t\t\tthis._map.delete(a);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tclear(): this {\n\t\tthis._map.clear();\n\t\treturn this;\n\t}\n\n\tentries(): IterableIterator<[A, B]> {\n\t\tconst entries: Array<[A, B]> = [];\n\t\tfor (const [a, setB] of this._map.entries()) {\n\t\t\tfor (const b of setB) {\n\t\t\t\tentries.push([a, b]);\n\t\t\t}\n\t\t}\n\t\treturn entries[Symbol.iterator]();\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[A, B]> {\n\t\treturn this.entries();\n\t}\n\n\tget size(): number {\n\t\tlet size = 0;\n\t\tfor (const setB of this._map.values()) {\n\t\t\tsize += setB.size;\n\t\t}\n\t\treturn size;\n\t}\n}\n"]}