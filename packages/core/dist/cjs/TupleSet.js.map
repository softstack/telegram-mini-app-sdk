{"version":3,"file":"TupleSet.js","sourceRoot":"","sources":["../../src/TupleSet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A class representing a set of tuples, where each tuple consists of two elements.\n * The first element is used as the key in a Map, and the second element is stored in a Set associated with that key.\n * This allows for efficient storage and retrieval of pairs of values.\n *\n * @template A - The type of the first element in the tuple.\n * @template B - The type of the second element in the tuple.\n */\nexport class TupleSet<A, B> {\n\t/**\n\t * Creates an instance of TupleSet.\n\t *\n\t * @param entries - An optional array of tuples, where each tuple contains two elements of types A and B.\n\t *                  If provided, each tuple will be added to the set.\n\t */\n\tconstructor(entries?: Array<[A, B]>) {\n\t\tif (entries) {\n\t\t\tfor (const [a, b] of entries) {\n\t\t\t\tthis.add(a, b);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A private map that associates keys of type `A` with sets of values of type `B`.\n\t * This map is used to store a collection of sets, where each set is associated with a unique key.\n\t *\n\t * @private\n\t */\n\tprivate _map = new Map<A, Set<B>>();\n\n\t/**\n\t * Adds a tuple (a, b) to the set if it does not already exist.\n\t *\n\t * @param a - The first element of the tuple.\n\t * @param b - The second element of the tuple.\n\t * @returns The current instance of the TupleSet.\n\t */\n\tadd(a: A, b: B): this {\n\t\tif (!this.has(a, b)) {\n\t\t\tif (this._map.has(a)) {\n\t\t\t\tthis._map.get(a)?.add(b);\n\t\t\t} else {\n\t\t\t\tthis._map.set(a, new Set([b]));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if the tuple (a, b) exists in the set.\n\t *\n\t * @param a - The first element of the tuple.\n\t * @param b - The second element of the tuple.\n\t * @returns `true` if the tuple (a, b) exists in the set, otherwise `false`.\n\t */\n\thas(a: A, b: B): boolean {\n\t\treturn this._map.get(a)?.has(b) ?? false;\n\t}\n\n\t/**\n\t * Deletes the tuple (a, b) from the set.\n\t *\n\t * @param a - The first element of the tuple to delete.\n\t * @param b - The second element of the tuple to delete.\n\t * @returns The current instance of the TupleSet.\n\t */\n\tdelete(a: A, b: B): this {\n\t\tif (this.has(a, b)) {\n\t\t\tthis._map.get(a)?.delete(b);\n\t\t\tif (this._map.get(a)?.size === 0) {\n\t\t\t\tthis._map.delete(a);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears all entries from the TupleSet.\n\t *\n\t * @returns {this} The current instance of the TupleSet.\n\t */\n\tclear(): this {\n\t\tfor (const setB of this._map.values()) {\n\t\t\tsetB.clear();\n\t\t}\n\t\tthis._map.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an iterable iterator of tuples containing elements from the set.\n\t * Each tuple consists of an element from the first set and an element from the second set.\n\t *\n\t * @returns {IterableIterator<[A, B]>} An iterable iterator of tuples.\n\t */\n\tentries(): IterableIterator<[A, B]> {\n\t\tconst entries: Array<[A, B]> = [];\n\t\tfor (const [a, setB] of this._map.entries()) {\n\t\t\tfor (const b of setB) {\n\t\t\t\tentries.push([a, b]);\n\t\t\t}\n\t\t}\n\t\treturn entries[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Returns an iterator that yields the entries of the TupleSet.\n\t * Each entry is a tuple containing two elements of types A and B.\n\t *\n\t * @returns {IterableIterator<[A, B]>} An iterator for the entries of the TupleSet.\n\t */\n\t[Symbol.iterator](): IterableIterator<[A, B]> {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Gets the total number of elements in the TupleSet.\n\t *\n\t * @returns {number} The total number of elements.\n\t */\n\tget size(): number {\n\t\tlet size = 0;\n\t\tfor (const setB of this._map.values()) {\n\t\t\tsize += setB.size;\n\t\t}\n\t\treturn size;\n\t}\n}\n"]}