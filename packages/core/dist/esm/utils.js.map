{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,KAAK,IAAI,MAAM,EACf,SAAS,IAAI,UAAU,GAIvB,MAAM,4BAA4B,CAAC;AACpC,OAAO,GAAiC,MAAM,KAAK,CAAC;AAGpD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAI,KAAQ,EAAE,MAAiB,EAAK,EAAE;IACnE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChE,IAAI,KAAK,EAAE,CAAC;QACX,MAAM,KAAK,CAAC;IACb,CAAC;IACD,OAAO,cAAc,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAc,EAAE,MAAc,EAAW,EAAE;IACvE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,CAAC,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAI,KAAc,EAAE,MAAc,EAAc,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAE/G,MAAM,CAAC,MAAM,YAAY,GAAG,CAAI,KAAc,EAAE,IAAoB,EAAc,EAAE;IACnF,MAAM,MAAM,GAAqB,EAAE,CAAC;IACpC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAC;IACD,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,OAAO,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,eAAe,GAAwC,CAAC,GAAG,EAAE,EAAE;IACpE,IAAI,GAAG,YAAY,MAAM,EAAE,CAAC;QAC3B,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;IAChF,CAAC;IACD,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,WAAW,GAAoC,CAAC,GAAG,EAAE,EAAE;IAC5D,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,GAAqC,CAAC;IACvD,QAAQ,CAAC,EAAE,CAAC;QACX,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC;YACD,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC;QAC9D,CAAC;IACF,CAAC;IACD,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,GAAY,EAAU,EAAE;IACjD,OAAO,UAAU,CAAC,GAAG,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,CAAS,EAAW,EAAE;IAC3C,OAAO,MAAM,CAAC,CAAC,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC","sourcesContent":["import {\n\tparse as _parse,\n\tstringify as _stringify,\n\tCustomParse,\n\tCustomStringify,\n\tTypedValue,\n} from '@softstack/typed-stringify';\nimport Joi, { PartialSchemaMap, Schema } from 'joi';\nimport { CustomStrigifyType } from './types';\n\nexport const validateSchema = <T>(value: T, schema: Schema<T>): T => {\n\tconst { error, value: validatedValue } = schema.validate(value);\n\tif (error) {\n\t\tthrow error;\n\t}\n\treturn validatedValue;\n};\n\nexport const validateType = (value: unknown, schema: Schema): boolean => {\n\tconst { error } = schema.validate(value);\n\treturn !error;\n};\n\nexport const validateGuardian = <T>(value: unknown, schema: Schema): value is T => validateType(value, schema);\n\nexport const validateKeys = <T>(value: unknown, keys: Array<keyof T>): value is T => {\n\tconst keyMap: PartialSchemaMap = {};\n\tfor (const key of keys) {\n\t\tkeyMap[key] = Joi.any().required();\n\t}\n\tconst schema = Joi.object().keys(keyMap);\n\treturn validateType(value, schema);\n};\n\nconst customStringify: CustomStringify<CustomStrigifyType> = (obj) => {\n\tif (obj instanceof Buffer) {\n\t\treturn { useResult: true, result: { t: 'Buffer', v: obj.toString('base64') } };\n\t}\n\treturn { useResult: false };\n};\n\nconst customParse: CustomParse<CustomStrigifyType> = (obj) => {\n\tconst { t, v } = obj as TypedValue<CustomStrigifyType>;\n\tswitch (t) {\n\t\tcase 'Buffer': {\n\t\t\tif (v === undefined) {\n\t\t\t\tthrow new Error('No value');\n\t\t\t}\n\t\t\treturn { useResult: true, result: Buffer.from(v, 'base64') };\n\t\t}\n\t}\n\treturn { useResult: false };\n};\n\nexport const stringify = (obj: unknown): string => {\n\treturn _stringify(obj, { customStringify });\n};\n\nexport const parse = (s: string): unknown => {\n\treturn _parse(s, { customParse });\n};\n"]}