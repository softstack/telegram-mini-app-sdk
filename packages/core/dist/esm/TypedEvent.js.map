{"version":3,"file":"TypedEvent.js","sourceRoot":"","sources":["../../src/TypedEvent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,8DAA8D;AAC9D,MAAM,OAAO,UAAU;IAAvB;QACS,YAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAC5B,eAAU,GAAG,IAAI,QAAQ,EAI9B,CAAC;QACI,cAAS,GAAG,KAAK,CAAC;IAuE3B,CAAC;IArEA,EAAE,CACD,SAAoB,EACpB,QAAoD;QAEpD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,MAAM,aAAa,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YACxD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,QAAkE,EAAE,aAAa,CAAC,CAAC;QACnH,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CACH,SAAoB,EACpB,QAAoD;QAEpD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,MAAM,aAAa,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YACxE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,QAAkE,EAAE,aAAa,CAAC,CAAC;QACnH,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,GAAG,CACF,SAAoB,EACpB,QAAoD;QAEpD,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,cAAc,CACb,SAAoB,EACpB,QAAoD;QAEpD,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CACxC,SAAS,EACT,QAAkE,CAClE,CAAC;QACF,IAAI,aAAa,EAAE,CAAC;YACnB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC3D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,QAAkE,CAAC,CAAC;QACvG,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,kBAAkB,CAA0C,SAAqB;QAChF,KAAK,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/D,IAAI,CAAC,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;gBACtC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBACtD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC;QACF,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAES,OAAO;QAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAES,IAAI,CACb,SAAoB,EACpB,aAAgC;QAEhC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;QACnF,CAAC;IACF,CAAC;CACD","sourcesContent":["import { toEventListener } from './base';\nimport { TupleMap } from './TupleMap';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class TypedEvent<Events extends Record<string, any>> {\n\tprivate _target = new EventTarget();\n\tprivate _listeners = new TupleMap<\n\t\tkeyof Events & string,\n\t\t(eventArgument: Events[keyof Events & string]) => void,\n\t\t(event: Event) => void\n\t>();\n\tprivate _disposed = false;\n\n\ton<EventName extends keyof Events & string>(\n\t\teventName: EventName,\n\t\tlistener: (eventArgument: Events[EventName]) => void,\n\t): this {\n\t\tif (!this._disposed) {\n\t\t\tconst eventListener = toEventListener(listener);\n\t\t\tthis._target.addEventListener(eventName, eventListener);\n\t\t\tthis._listeners.set(eventName, listener as (eventArgument: Events[keyof Events & string]) => void, eventListener);\n\t\t}\n\t\treturn this;\n\t}\n\n\tonce<EventName extends keyof Events & string>(\n\t\teventName: EventName,\n\t\tlistener: (eventArgument: Events[EventName]) => void,\n\t): this {\n\t\tif (!this._disposed) {\n\t\t\tconst eventListener = toEventListener(listener);\n\t\t\tthis._target.addEventListener(eventName, eventListener, { once: true });\n\t\t\tthis._listeners.set(eventName, listener as (eventArgument: Events[keyof Events & string]) => void, eventListener);\n\t\t}\n\t\treturn this;\n\t}\n\n\toff<EventName extends keyof Events & string>(\n\t\teventName: EventName,\n\t\tlistener: (eventArgument: Events[EventName]) => void,\n\t): this {\n\t\treturn this.removeListener(eventName, listener);\n\t}\n\n\tremoveListener<EventName extends keyof Events & string>(\n\t\teventName: EventName,\n\t\tlistener: (eventArgument: Events[EventName]) => void,\n\t): this {\n\t\tconst eventListener = this._listeners.get(\n\t\t\teventName,\n\t\t\tlistener as (eventArgument: Events[keyof Events & string]) => void,\n\t\t);\n\t\tif (eventListener) {\n\t\t\tthis._target.removeEventListener(eventName, eventListener);\n\t\t\tthis._listeners.delete(eventName, listener as (eventArgument: Events[keyof Events & string]) => void);\n\t\t}\n\t\treturn this;\n\t}\n\n\tremoveAllListeners<EventName extends keyof Events & string>(eventName?: EventName): this {\n\t\tfor (const [name, listener, eventListener] of this._listeners) {\n\t\t\tif (!eventName || name === eventName) {\n\t\t\t\tthis._target.removeEventListener(name, eventListener);\n\t\t\t\tthis._listeners.delete(name, listener);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprotected dispose(): void {\n\t\tthis._disposed = true;\n\t\tthis.removeAllListeners();\n\t}\n\n\tprotected emit<EventName extends keyof Events & string>(\n\t\teventName: EventName,\n\t\teventArgument: Events[EventName],\n\t): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._target.dispatchEvent(new CustomEvent(eventName, { detail: eventArgument }));\n\t\t}\n\t}\n}\n"]}