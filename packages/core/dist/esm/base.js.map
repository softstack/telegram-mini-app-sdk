{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/base.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAA2B,MAAS,EAAE,QAAW,EAAoC,EAAE,CACpH,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAExD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,EAAU,EAAiB,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAEtG;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,GAAG,KAAoB,EAAU,EAAE;IAC1D,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;QACxB,IAAI,GAAG,EAAE,CAAC;YACT,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACvB,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC;YACD,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YACD,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,CAAC;aAAM,CAAC;YACP,GAAG,GAAG,IAAI,CAAC;QACZ,CAAC;IACF,CAAC;IACD,OAAO,GAAG,CAAC;AACZ,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,eAAe,GAC3B,CAAU,OAAmC,EAAE,EAAE,CACjD,CAAC,KAAY,EAAQ,EAAE;IACtB,OAAO,CAAE,KAA8B,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC,CAAC","sourcesContent":["/**\n * Checks if an object has a property as its own (not inherited).\n *\n * @template X - The type of the object.\n * @template Y - The type of the property key.\n * @param object - The object to check.\n * @param property - The property key to check for.\n * @returns A type predicate indicating whether the object has the property.\n */\nexport const hasOwnProperty = <X, Y extends PropertyKey>(object: X, property: Y): object is X & Record<Y, unknown> =>\n\tObject.prototype.hasOwnProperty.call(object, property);\n\n/**\n * Pauses the execution for a specified number of milliseconds.\n *\n * @param ms - The number of milliseconds to sleep.\n * @returns A promise that resolves after the specified duration.\n */\nexport const sleep = (ms: number): Promise<void> => new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * Joins multiple parts of a URL into a single URL string.\n *\n * @param parts - An array of strings representing parts of a URL.\n * @returns The concatenated URL string.\n *\n * @example\n * ```typescript\n * const url = joinUrl('http://example.com', 'path', 'to', 'resource');\n * console.log(url); // Output: 'http://example.com/path/to/resource'\n * ```\n */\nexport const joinUrl = (...parts: Array<string>): string => {\n\tlet url = '';\n\tfor (let part of parts) {\n\t\tif (url) {\n\t\t\tif (url.endsWith('/')) {\n\t\t\t\turl = url.slice(0, -1);\n\t\t\t}\n\t\t\tif (part.startsWith('/')) {\n\t\t\t\tpart = part.slice(1);\n\t\t\t}\n\t\t\turl = `${url}/${part}`;\n\t\t} else {\n\t\t\turl = part;\n\t\t}\n\t}\n\treturn url;\n};\n\n/**\n * Converts a handler function into an event listener.\n *\n * @template Payload - The type of the payload expected by the handler.\n * @param handler - A function that takes a payload of type `Payload` and returns void.\n * @returns A function that takes an `Event` and calls the handler with the event's detail.\n */\nexport const toEventListener =\n\t<Payload>(handler: (payload: Payload) => void) =>\n\t(event: Event): void => {\n\t\thandler((event as CustomEvent<Payload>).detail);\n\t};\n"]}