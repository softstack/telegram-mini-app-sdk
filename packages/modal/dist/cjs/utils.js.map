{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { twMerge } from 'tailwind-merge';\nimport { TAILWIND_PREFIX, TOAST_CONTAINER_ID } from './constants';\n\n/**\n * Creates a function that prefixes Tailwind CSS class names with a specified prefix.\n *\n * @param prefix - The prefix to add to each Tailwind CSS class name.\n * @param separator - The separator used to split and join class name parts. Defaults to ':'.\n * @returns A function that takes a variable number of class names (or false/undefined values) and returns a single string with the prefixed class names.\n *\n * @example\n * ```typescript\n * const prefixer = createTailwindPrefixer('tw-');\n * const className = prefixer('bg-red-500', 'text-white');\n * console.log(className); // Outputs: 'tw-bg-red-500 tw-text-white'\n * ```\n */\nexport const createTailwindPrefixer = (prefix: string, separator = ':') => {\n\treturn (...args: Array<false | string | undefined>): string => {\n\t\tlet className = '';\n\t\tconst cssClasses = twMerge(args).split(' ').filter(Boolean);\n\t\tfor (const cssClass of cssClasses) {\n\t\t\tconst parts = cssClass.split(separator);\n\t\t\tlet prefixedCssClass = '';\n\t\t\tfor (let index = parts.length - 1; index >= 0; index--) {\n\t\t\t\tif (parts.length - 1 === index) {\n\t\t\t\t\tif (parts[index].startsWith(prefix)) {\n\t\t\t\t\t\tprefixedCssClass = cssClass;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (parts[index].startsWith('-')) {\n\t\t\t\t\t\tprefixedCssClass = '-' + prefix + parts[index].slice(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefixedCssClass = prefix + parts[index];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprefixedCssClass = parts[index] + separator + prefixedCssClass;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclassName += (className && ' ') + prefixedCssClass;\n\t\t}\n\n\t\treturn className;\n\t};\n};\n\nexport const tw = createTailwindPrefixer(TAILWIND_PREFIX);\n\nlet version = 0;\n/**\n * Increments the current version number by one and returns the new version.\n *\n * @returns {number} The incremented version number.\n */\nexport const nextVersion = (): number => ++version;\n\n/**\n * A custom hook that manages state with versioning. It ensures that state updates\n * are only applied if the new version is greater than the current version.\n *\n * @template T - The type of the state value.\n * @param value - The initial state value.\n * @returns A tuple containing the current state value and a setter function.\n *\n * The setter function takes two arguments:\n * - `version`: The version number associated with the new state.\n * - `action`: A function that takes the previous state value and returns the new state value,\n *   or the new state value directly.\n *\n * @example\n * const [state, setState] = useVersionedState(initialValue);\n *\n * // Update state with a new version\n * setState(newVersion, (prevValue) => newValue);\n *\n * // Update state directly with a new version\n * setState(newVersion, newValue);\n */\nexport const useVersionedState = <T>(\n\tvalue: T,\n): readonly [T, (version: number, action: ((prevValue: T) => T) | T) => void] => {\n\tconst [getter, setter] = useState<{ value: T; version: number }>({ value, version: nextVersion() });\n\n\tconst wrappedSetter = useCallback((newVersion: number, action: ((prevValue: T) => T) | T) => {\n\t\tsetter((prevValue) => {\n\t\t\tif (newVersion > prevValue.version) {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: typeof action === 'function' ? (action as (prevValue: T) => T)(prevValue.value) : action,\n\t\t\t\t\tversion: newVersion,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn prevValue;\n\t\t});\n\t}, []);\n\n\treturn useMemo(() => [getter.value, wrappedSetter], [getter.value, wrappedSetter]);\n};\n\n/**\n * Custom hook that detects if the document body has the 'dark-mode' class.\n * It sets up a MutationObserver to listen for changes to the class attribute\n * on the document body and updates the state accordingly.\n *\n * @returns {boolean} - Returns `true` if the 'dark-mode' class is present on the document body, otherwise `false`.\n */\nexport const useDarkMode = (): boolean => {\n\tconst [darkMode, setDarkMode] = useState(document.body.classList.contains('dark-mode'));\n\n\tuseEffect(() => {\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tfor (const mutation of mutations) {\n\t\t\t\tif (mutation.attributeName === 'class') {\n\t\t\t\t\tsetDarkMode(document.body.classList.contains('dark-mode'));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tobserver.observe(document.body, { attributeFilter: ['class'] });\n\t\treturn (): void => observer.disconnect();\n\t}, []);\n\n\treturn darkMode;\n};\n\nexport const handleError = (error: unknown): void => {\n\tif (error instanceof Error) {\n\t\ttoast.error(error.message, { containerId: TOAST_CONTAINER_ID });\n\t} else {\n\t\tconsole.error(error);\n\t}\n};\n"]}