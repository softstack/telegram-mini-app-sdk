{"version":3,"file":"CopyButton.js","sourceRoot":"","sources":["../../../../src/components/buttons/CopyButton.tsx"],"names":[],"mappings":";;;;AAAA,+BAA4B;AAC5B,iCAA6D;AAE7D,qCAAkC;AAClC,wCAAqC;AACrC,6CAA2D;AAO9C,QAAA,UAAU,GAAG,IAAA,YAAI,EAAkB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;IACxF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,EAAkC,SAAS,CAAC,CAAC;IAEjF,MAAM,UAAU,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QACnC,IAAI,CAAC;YACJ,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBACzB,SAAS,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC;iBAAM,CAAC;gBACP,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACrC,SAAS,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC;QACF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,SAAS,CAAC,OAAO,CAAC,CAAC;YACnB,MAAM,KAAK,CAAC;QACb,CAAC;gBAAS,CAAC;YACV,UAAU,CAAC,GAAG,EAAE;gBACf,SAAS,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC,EAAE,IAAI,CAAC,CAAC;QACV,CAAC;IACF,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,MAAM,QAAQ,GAAG,IAAA,eAAO,EAAW,GAAG,EAAE;QACvC,QAAQ,MAAM,EAAE,CAAC;YAChB,KAAK,OAAO;gBACX,OAAO,YAAY,CAAC;YACrB,KAAK,SAAS;gBACb,OAAO,YAAY,CAAC;YACrB;gBACC,OAAO,aAAa,CAAC;QACvB,CAAC;IACF,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,OAAO,CACN,wBAAC,uBAAU,IAAC,SAAS,EAAE,IAAA,WAAI,EAAC,sCAAsC,EAAE,SAAS,CAAC,EAAE,OAAO,EAAE,UAAU,KAAM,KAAK,aAC7G,uBAAC,SAAG,IAAC,SAAS,EAAC,mBAAmB,YACjC,uBAAC,WAAI,IACJ,IAAI,EAAE,QAAQ,EACd,SAAS,EAAE,IAAA,WAAI,EAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,EACtG,MAAM,EAAE,EAAE,EACV,KAAK,EAAE,EAAE,GACR,GACG,EACN,uBAAC,SAAG,IAAC,SAAS,EAAC,WAAW,YAAE,IAAI,GAAO,IAC3B,CACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAU,CAAC,WAAW,GAAG,YAAY,CAAC","sourcesContent":["import { clsx } from 'clsx';\nimport { memo, useCallback, useMemo, useState } from 'react';\nimport { IconType } from 'types';\nimport { Row } from '../flex/Row';\nimport { Icon } from '../icons/Icon';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\nexport interface CopyButtonProps extends BaseButtonProps {\n\ttext: string;\n\tvalue: string | undefined;\n}\n\nexport const CopyButton = memo<CopyButtonProps>(({ text, value, className, ...props }) => {\n\tconst [copied, setCopied] = useState<'success' | 'error' | undefined>(undefined);\n\n\tconst handleCopy = useCallback(() => {\n\t\ttry {\n\t\t\tif (value === undefined) {\n\t\t\t\tsetCopied('error');\n\t\t\t} else {\n\t\t\t\tnavigator.clipboard.writeText(value);\n\t\t\t\tsetCopied('success');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetCopied('error');\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetCopied(undefined);\n\t\t\t}, 1500);\n\t\t}\n\t}, [value]);\n\n\tconst copyIcon = useMemo<IconType>(() => {\n\t\tswitch (copied) {\n\t\t\tcase 'error':\n\t\t\t\treturn 'xmarkSolid';\n\t\t\tcase 'success':\n\t\t\t\treturn 'checkSolid';\n\t\t\tdefault:\n\t\t\t\treturn 'copyRegular';\n\t\t}\n\t}, [copied]);\n\n\treturn (\n\t\t<BaseButton className={clsx('flex-row items-center gap-x-1.5 py-1', className)} onClick={handleCopy} {...props}>\n\t\t\t<Row className=\"h-[20px] w-[20px]\">\n\t\t\t\t<Icon\n\t\t\t\t\ticon={copyIcon}\n\t\t\t\t\tclassName={clsx(copied === 'error' ? 'text-error' : copied === 'success' ? 'text-success' : undefined)}\n\t\t\t\t\theight={20}\n\t\t\t\t\twidth={20}\n\t\t\t\t/>\n\t\t\t</Row>\n\t\t\t<Row className=\"break-all\">{text}</Row>\n\t\t</BaseButton>\n\t);\n});\n\nCopyButton.displayName = 'CopyButton';\n"]}