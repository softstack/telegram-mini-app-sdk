{"version":3,"file":"PngIcon.js","sourceRoot":"","sources":["../../../../src/components/icons/PngIcon.tsx"],"names":[],"mappings":";;;;;;;AAAA,iCAAsD;AACtD,wFAA4D;AAC5D,gFAAoD;AACpD,mFAAsD;AACtD,+EAAmD;AACnD,iFAAqD;AACrD,+EAAmD;AACnD,uFAA0D;AAC1D,qFAAwD;AACxD,iFAAqD;AACrD,+EAAmD;AAEnD,uCAAiC;AAqBpB,QAAA,OAAO,GAAG,IAAA,YAAI,EAAe,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;IAC1F,MAAM,GAAG,GAAG,IAAA,eAAO,EAAS,GAAG,EAAE;QAChC,QAAQ,IAAI,EAAE,CAAC;YACd,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,OAAO,qBAAM,CAAC;YACf,CAAC;YACD,KAAK,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,mBAAK,CAAC;YACd,CAAC;YACD,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,OAAO,oBAAM,CAAC;YACf,CAAC;YACD,KAAK,WAAW,CAAC,CAAC,CAAC;gBAClB,OAAO,uBAAS,CAAC;YAClB,CAAC;YACD,KAAK,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,mBAAK,CAAC;YACd,CAAC;YACD,KAAK,UAAU,CAAC,CAAC,CAAC;gBACjB,OAAO,uBAAQ,CAAC;YACjB,CAAC;YACD,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,OAAO,sBAAO,CAAC;YAChB,CAAC;YACD,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,OAAO,oBAAM,CAAC;YACf,CAAC;YACD,KAAK,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,mBAAK,CAAC;YACd,CAAC;YACD,KAAK,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,mBAAK,CAAC;YACd,CAAC;QACF,CAAC;IACF,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,gCAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,IAAA,UAAE,EAAC,YAAY,EAAE,SAAS,CAAC,KAAM,KAAK,GAAI,CAAC;AACvG,CAAC,CAAC,CAAC;AAEH,eAAO,CAAC,WAAW,GAAG,SAAS,CAAC","sourcesContent":["import { HTMLAttributes, memo, useMemo } from 'react';\nimport etherlink from '../../assets/networks/etherlink.png';\nimport tezos from '../../assets/networks/tezos.png';\nimport airGap from '../../assets/wallets/air-gap.png';\nimport altme from '../../assets/wallets/altme.png';\nimport bitget from '../../assets/wallets/bitget.png';\nimport kukai from '../../assets/wallets/kukai.png';\nimport metaMask from '../../assets/wallets/meta-mask.png';\nimport safePal from '../../assets/wallets/safe-pal.png';\nimport temple from '../../assets/wallets/temple.png';\nimport trust from '../../assets/wallets/trust.png';\nimport { PngIconType } from '../../types';\nimport { tw } from '../../utils';\n\nexport interface PngIconProps extends HTMLAttributes<HTMLImageElement> {\n\ticon: PngIconType;\n\theight: number;\n\twidth: number;\n}\n\n/**\n * A memoized functional component that renders an image based on the provided icon name.\n *\n * @param {PngIconProps} props - The properties for the PngIcon component.\n * @param {string} props.icon - The name of the icon to be displayed. Possible values are:\n *   'airGap', 'altme', 'bitget', 'etherlink', 'kukai', 'metaMask', 'safePal', 'temple', 'tezos', 'trust'.\n * @param {string | number} props.height - The height of the image.\n * @param {string | number} props.width - The width of the image.\n * @param {string} [props.className] - Additional CSS classes to apply to the image.\n * @param {object} [props.props] - Additional properties to spread onto the img element.\n *\n * @returns {JSX.Element} The rendered img element with the specified icon.\n */\nexport const PngIcon = memo<PngIconProps>(({ icon, height, width, className, ...props }) => {\n\tconst src = useMemo<string>(() => {\n\t\tswitch (icon) {\n\t\t\tcase 'airGap': {\n\t\t\t\treturn airGap;\n\t\t\t}\n\t\t\tcase 'altme': {\n\t\t\t\treturn altme;\n\t\t\t}\n\t\t\tcase 'bitget': {\n\t\t\t\treturn bitget;\n\t\t\t}\n\t\t\tcase 'etherlink': {\n\t\t\t\treturn etherlink;\n\t\t\t}\n\t\t\tcase 'kukai': {\n\t\t\t\treturn kukai;\n\t\t\t}\n\t\t\tcase 'metaMask': {\n\t\t\t\treturn metaMask;\n\t\t\t}\n\t\t\tcase 'safePal': {\n\t\t\t\treturn safePal;\n\t\t\t}\n\t\t\tcase 'temple': {\n\t\t\t\treturn temple;\n\t\t\t}\n\t\t\tcase 'tezos': {\n\t\t\t\treturn tezos;\n\t\t\t}\n\t\t\tcase 'trust': {\n\t\t\t\treturn trust;\n\t\t\t}\n\t\t}\n\t}, [icon]);\n\n\treturn <img src={src} style={{ height, width }} className={tw('border-box', className)} {...props} />;\n});\n\nPngIcon.displayName = 'PngIcon';\n"]}