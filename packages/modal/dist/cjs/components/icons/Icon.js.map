{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../../../src/components/icons/Icon.tsx"],"names":[],"mappings":";;;;AAAA,iCAAsC;AAEtC,uCAAoC;AACpC,uCAAoC;AAiBvB,QAAA,IAAI,GAAG,IAAA,YAAI,EAAY,CAAC,EAAE,IAAI,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;IAC1D,MAAM,SAAS,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC9B,QAAQ,IAAI,EAAE,CAAC;YACd,KAAK,QAAQ,CAAC;YACd,KAAK,OAAO,CAAC;YACb,KAAK,QAAQ,CAAC;YACd,KAAK,WAAW,CAAC;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS,CAAC;YACf,KAAK,QAAQ,CAAC;YACd,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,IAAI,CAAC;YACb,CAAC;YACD,OAAO,CAAC,CAAC,CAAC;gBACT,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;IACF,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,IAAI,SAAS,EAAE,CAAC;QACf,OAAO,uBAAC,iBAAO,IAAC,IAAI,EAAE,IAAmB,KAAM,KAAK,GAAI,CAAC;IAC1D,CAAC;IACD,OAAO,uBAAC,iBAAO,IAAC,IAAI,EAAE,IAAmB,KAAM,KAAK,GAAI,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH,YAAI,CAAC,WAAW,GAAG,MAAM,CAAC","sourcesContent":["import { memo, useMemo } from 'react';\nimport { IconType, PngIconType, SvgIconType } from '../../types';\nimport { PngIcon } from './PngIcon';\nimport { SvgIcon } from './SvgIcon';\n\nexport interface IconProps {\n\ticon: IconType;\n\theight: number;\n\twidth: number;\n\tclassName?: string;\n}\n\n/**\n * A memoized functional component that renders an icon based on the provided `icon` prop.\n * It determines whether the icon is a PNG or SVG and renders the appropriate component.\n *\n * @param {IconProps} props - The properties for the Icon component.\n * @param {string} props.icon - The name of the icon to be rendered.\n * @returns {JSX.Element} The rendered icon component, either a `PngIcon` or `SvgIcon`.\n */\nexport const Icon = memo<IconProps>(({ icon, ...props }) => {\n\tconst isPngIcon = useMemo(() => {\n\t\tswitch (icon) {\n\t\t\tcase 'airGap':\n\t\t\tcase 'altme':\n\t\t\tcase 'bitget':\n\t\t\tcase 'etherlink':\n\t\t\tcase 'kukai':\n\t\t\tcase 'metaMask':\n\t\t\tcase 'safePal':\n\t\t\tcase 'temple':\n\t\t\tcase 'tezos':\n\t\t\tcase 'trust': {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, [icon]);\n\n\tif (isPngIcon) {\n\t\treturn <PngIcon icon={icon as PngIconType} {...props} />;\n\t}\n\treturn <SvgIcon icon={icon as SvgIconType} {...props} />;\n});\n\nIcon.displayName = 'Icon';\n"]}