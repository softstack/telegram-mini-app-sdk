{"version":3,"file":"BaseButton.js","sourceRoot":"","sources":["../../../../src/components/buttons/BaseButton.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAkB,IAAI,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AAcjC,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAkB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,CAAC,CACtF,iBACC,SAAS,EAAE,EAAE,CACZ,iHAAiH,EACjH,SAAS,CACT,KACG,KAAK,YAER,QAAQ,GACD,CACT,CAAC,CAAC;AAEH,UAAU,CAAC,WAAW,GAAG,YAAY,CAAC","sourcesContent":["import { HTMLAttributes, memo } from 'react';\nimport { tw } from '../../utils';\n\nexport type BaseButtonProps = HTMLAttributes<HTMLButtonElement>;\n\n/**\n * `BaseButton` is a memoized functional component that renders a customizable button element.\n *\n * @param {BaseButtonProps} props - The properties passed to the button component.\n * @param {React.ReactNode} props.children - The content to be displayed inside the button.\n * @param {string} [props.className] - Additional class names to apply to the button.\n * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props - Additional props to be spread onto the button element.\n *\n * @returns {JSX.Element} A button element with the specified properties and children.\n */\nexport const BaseButton = memo<BaseButtonProps>(({ children, className, ...props }) => (\n\t<button\n\t\tclassName={tw(\n\t\t\t'border-box no-tap-highlight flex cursor-pointer border-none bg-transparent p-0 font-sans text-base text-inherit',\n\t\t\tclassName,\n\t\t)}\n\t\t{...props}\n\t>\n\t\t{children}\n\t</button>\n));\n\nBaseButton.displayName = 'BaseButton';\n"]}