{"version":3,"file":"SvgIcon.js","sourceRoot":"","sources":["../../../../src/components/icons/SvgIcon.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAM,IAAI,EAAY,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC7E,OAAO,GAAc,MAAM,iBAAiB,CAAC;AAC7C,OAAO,UAAU,MAAM,oCAAoC,CAAC;AAC5D,OAAO,gBAAgB,MAAM,2CAA2C,CAAC;AACzE,OAAO,gBAAgB,MAAM,2CAA2C,CAAC;AACzE,OAAO,cAAc,MAAM,yCAAyC,CAAC;AACrE,OAAO,WAAW,MAAM,qCAAqC,CAAC;AAC9D,OAAO,gBAAgB,MAAM,2CAA2C,CAAC;AACzE,OAAO,UAAU,MAAM,oCAAoC,CAAC;AAE5D,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AAEjC,MAAM,YAAY,GAAG,GAAgB,CAAC;AAEtC,MAAM,MAAM,GAAG,CAAC,IAAiB,EAAU,EAAE;IAC5C,QAAQ,IAAI,EAAE,CAAC;QACd,KAAK,YAAY,CAAC,CAAC,CAAC;YACnB,OAAO,UAAU,CAAC;QACnB,CAAC;QACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACzB,OAAO,gBAAgB,CAAC;QACzB,CAAC;QACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACzB,OAAO,gBAAgB,CAAC;QACzB,CAAC;QACD,KAAK,gBAAgB,CAAC,CAAC,CAAC;YACvB,OAAO,cAAc,CAAC;QACvB,CAAC;QACD,KAAK,aAAa,CAAC,CAAC,CAAC;YACpB,OAAO,WAAW,CAAC;QACpB,CAAC;QACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACzB,OAAO,gBAAgB,CAAC;QACzB,CAAC;QACD,KAAK,YAAY,CAAC,CAAC,CAAC;YACnB,OAAO,UAAU,CAAC;QACnB,CAAC;IACF,CAAC;AACF,CAAC,CAAC;AAiBF,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,CAAe,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;IAC3E,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEjD,SAAS,CAAC,GAAG,EAAE;QACd,IAAI,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YACvC,OAAO;QACR,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACrB,YAAY,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IAE3B,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;QACnC,YAAY,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,KAAC,YAAY,IAAC,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,KAAM,KAAK,GAAI,CAAC;AAC1G,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC","sourcesContent":["import { FC, memo, SVGProps, useCallback, useEffect, useState } from 'react';\nimport Svg, { Props } from 'react-inlinesvg';\nimport checkSolid from '../../assets/icons/check-solid.svg';\nimport chevronDownSolid from '../../assets/icons/chevron-down-solid.svg';\nimport chevronLeftSolid from '../../assets/icons/chevron-left-solid.svg';\nimport chevronUpSolid from '../../assets/icons/chevron-up-solid.svg';\nimport copyRegular from '../../assets/icons/copy-regular.svg';\nimport fileLinesRegular from '../../assets/icons/file-lines-regular.svg';\nimport xmarkSolid from '../../assets/icons/xmark-solid.svg';\nimport { SvgIconType } from '../../types';\nimport { tw } from '../../utils';\n\nconst SvgComponent = Svg as FC<Props>;\n\nconst getSrc = (icon: SvgIconType): string => {\n\tswitch (icon) {\n\t\tcase 'checkSolid': {\n\t\t\treturn checkSolid;\n\t\t}\n\t\tcase 'chevronDownSolid': {\n\t\t\treturn chevronDownSolid;\n\t\t}\n\t\tcase 'chevronLeftSolid': {\n\t\t\treturn chevronLeftSolid;\n\t\t}\n\t\tcase 'chevronUpSolid': {\n\t\t\treturn chevronUpSolid;\n\t\t}\n\t\tcase 'copyRegular': {\n\t\t\treturn copyRegular;\n\t\t}\n\t\tcase 'fileLinesRegular': {\n\t\t\treturn fileLinesRegular;\n\t\t}\n\t\tcase 'xmarkSolid': {\n\t\t\treturn xmarkSolid;\n\t\t}\n\t}\n};\n\nexport interface SvgIconProps extends Omit<SVGProps<SVGElement>, 'onLoad' | 'onError' | 'ref'> {\n\ticon: SvgIconType;\n}\n\n/**\n * SvgIcon component is a memoized functional component that renders an SVG icon.\n * It manages the loading state of the SVG source and updates the source when the icon prop changes.\n *\n * @param {SvgIconProps} props - The properties for the SvgIcon component.\n * @param {string} props.icon - The name or path of the SVG icon to be displayed.\n * @param {string} [props.className] - Optional additional class names to apply to the SVG element.\n * @param {object} [props.props] - Additional properties to be spread onto the SVG element.\n *\n * @returns {JSX.Element} The rendered SVG icon component.\n */\nexport const SvgIcon = memo<SvgIconProps>(({ icon, className, ...props }) => {\n\tconst [src, setSrc] = useState(getSrc(icon));\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tif (isLoading || getSrc(icon) === src) {\n\t\t\treturn;\n\t\t}\n\t\tsetSrc(getSrc(icon));\n\t\tsetIsLoading(true);\n\t}, [isLoading, src, icon]);\n\n\tconst handleLoad = useCallback(() => {\n\t\tsetIsLoading(false);\n\t}, []);\n\n\treturn <SvgComponent src={src} className={tw('border-box', className)} onLoad={handleLoad} {...props} />;\n});\n\nSvgIcon.displayName = 'SvgIcon';\n"]}