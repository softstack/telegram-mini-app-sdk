{"version":3,"file":"Accordion.js","sourceRoot":"","sources":["../../../src/components/Accordion.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,GAAG,EAAY,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AACjC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAqBpC,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,CAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;IAC9G,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAEhE,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;QACnC,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC;QACxC,eAAe,CAAC,OAAO,CAAC,CAAC;QACzB,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;IAEvC,OAAO,CACN,MAAC,GAAG,IAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,KAAM,KAAK,aACpD,MAAC,GAAG,IAAC,SAAS,EAAC,iBAAiB,aAC/B,KAAC,GAAG,cAAE,KAAK,GAAO,EAClB,KAAC,UAAU,IACV,SAAS,EAAC,4HAA4H,EACtI,OAAO,EAAE,UAAU,YAEnB,KAAC,IAAI,IACJ,IAAI,EAAE,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,kBAAkB,EACpE,SAAS,EAAC,8BAA8B,EACxC,MAAM,EAAE,EAAE,EACV,KAAK,EAAE,EAAE,GACR,GACU,IACR,EACN,KAAC,IAAI,IACJ,SAAS,EAAE,IAAI,CACd,yEAAyE,EACzE,CAAC,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,QAAQ,CACnC,YAEA,QAAQ,GACH,IACF,CACN,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,WAAW,GAAG,WAAW,CAAC","sourcesContent":["import { clsx } from 'clsx';\nimport { memo, useCallback, useState } from 'react';\nimport { BaseButton } from './buttons/BaseButton';\nimport { Col, ColProps } from './flex/Col';\nimport { Row } from './flex/Row';\nimport { Grid } from './Grid';\nimport { Icon } from './icons/Icon';\n\nexport interface AccordionProps extends ColProps {\n\ttitle: string;\n\topen: boolean;\n\tonChangeOpen: (open: boolean) => void;\n}\n\n/**\n * Accordion component that displays a collapsible section with a title.\n *\n * @param {AccordionProps} props - The properties for the Accordion component.\n * @param {string} props.title - The title of the accordion.\n * @param {boolean} [props.open] - Whether the accordion is initially open.\n * @param {function} [props.onChangeOpen] - Callback function to handle the change in open state.\n * @param {string} [props.className] - Additional class names for the accordion.\n * @param {React.ReactNode} props.children - The content to be displayed inside the accordion.\n * @param {object} [props] - Additional properties to be passed to the accordion.\n *\n * @returns {JSX.Element} The rendered Accordion component.\n */\nexport const Accordion = memo<AccordionProps>(({ title, open, onChangeOpen, className, children, ...props }) => {\n\tconst [internalOpen, setInternalOpen] = useState(open ?? false);\n\n\tconst toggleOpen = useCallback(() => {\n\t\tconst newOpen = !(open ?? internalOpen);\n\t\tsetInternalOpen(newOpen);\n\t\tonChangeOpen?.(newOpen);\n\t}, [open, internalOpen, onChangeOpen]);\n\n\treturn (\n\t\t<Col className={clsx('gap-y-4', className)} {...props}>\n\t\t\t<Row className=\"justify-between\">\n\t\t\t\t<Row>{title}</Row>\n\t\t\t\t<BaseButton\n\t\t\t\t\tclassName=\"border-line dark:border-lineDark bg-light size-6 items-center justify-center rounded-full border border-solid dark:bg-dark\"\n\t\t\t\t\tonClick={toggleOpen}\n\t\t\t\t>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\ticon={(open ?? internalOpen) ? 'chevronUpSolid' : 'chevronDownSolid'}\n\t\t\t\t\t\tclassName=\"text-icon dark:text-iconDark\"\n\t\t\t\t\t\theight={12}\n\t\t\t\t\t\twidth={12}\n\t\t\t\t\t/>\n\t\t\t\t</BaseButton>\n\t\t\t</Row>\n\t\t\t<Grid\n\t\t\t\tclassName={clsx(\n\t\t\t\t\t'auto-rows-auto grid-cols-[repeat(auto-fill,minmax(4.313rem,1fr))] gap-1',\n\t\t\t\t\t!(open ?? internalOpen) && 'hidden',\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Grid>\n\t\t</Col>\n\t);\n});\n\nAccordion.displayName = 'Accordion';\n"]}