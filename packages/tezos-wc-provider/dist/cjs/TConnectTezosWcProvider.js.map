{"version":3,"file":"TConnectTezosWcProvider.js","sourceRoot":"","sources":["../../src/TConnectTezosWcProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tWalletDelegateParams,\n\tWalletFinalizeUnstakeParams,\n\tWalletIncreasePaidStorageParams,\n\tWalletOriginateParams,\n\tWalletProvider,\n\tWalletStakeParams,\n\tWalletTransferParams,\n\tWalletTransferTicketParams,\n\tWalletUnstakeParams,\n} from '@taquito/taquito';\nimport { parse, sleep, stringify, TypedEvent } from '@tconnect.io/core';\nimport { CommunicationController } from '@tconnect.io/dapp-communication';\nimport { getErrorMessage, isAndroid, openLink } from '@tconnect.io/dapp-utils';\nimport {\n\tEVENT_CHANNEL,\n\tREQUEST_CHANNEL,\n\tSOCKET_IO_PATH,\n\tTezosWcConnectedRequest,\n\tTezosWcConnectedResponse,\n\tTezosWcConnectRequest,\n\tTezosWcConnectResponse,\n\tTezosWcDisconnectRequest,\n\tTezosWcDisconnectResponse,\n\tTezosWcError,\n\tTezosWcEvent,\n\tTezosWcNetwork,\n\tTezosWcReconnectRequest,\n\tTezosWcReconnectResponse,\n\tTezosWcRequest,\n\tTezosWcRequestRequest,\n\tTezosWcRequestResponse,\n\tTezosWcResponse,\n} from '@tconnect.io/tezos-wc-api-types';\nimport {\n\tGetAccountsResult,\n\tRequestSignPayloadInput,\n\tSerializedTConnectTezosWcProvider,\n\tTConnectTezosWcProviderEvents,\n\tTConnectTezosWcProviderOptions,\n\tTezosWcWalletApp,\n} from './types';\nimport { getConnectionStringUniversalLink, getUniversalLink } from './utils/utils';\nimport {\n\tisGetAccountsResult,\n\tisSendResult,\n\tisSignResult,\n\tvalidateTezosWcEvent,\n\tvalidateTezosWcResponse,\n} from './validation';\n\n/**\n * The `TConnectTezosWcProvider` class provides a wallet connection provider for Tezos using WalletConnect.\n * It extends `TypedEvent` to handle events and implements the `WalletProvider` interface.\n *\n * @class\n * @extends TypedEvent<TConnectTezosWcProviderEvents>\n * @implements WalletProvider\n */\nexport class TConnectTezosWcProvider extends TypedEvent<TConnectTezosWcProviderEvents> implements WalletProvider {\n\t/**\n\t * Creates an instance of TConnectTezosWcProvider.\n\t *\n\t * @param options - The options for configuring the provider.\n\t * @param options.apiKey - The API key for authentication.\n\t * @param options.bridgeUrl - The URL of the bridge server.\n\t * @param options.walletApp - The wallet application to use.\n\t * @param options.network - The network to connect to (default is 'mainnet').\n\t */\n\tconstructor(options: TConnectTezosWcProviderOptions) {\n\t\tsuper();\n\t\tthis.appName = options.appName;\n\t\tthis.appUrl = options.appUrl;\n\t\tthis.appIcon = options.appIcon;\n\t\tthis._apiKey = options.apiKey;\n\t\tthis.bridgeUrl = options.bridgeUrl;\n\t\tthis.walletApp = options.walletApp;\n\t\tthis.network = options.network ?? 'mainnet';\n\t\tthis._communicationController = new CommunicationController(\n\t\t\tthis.bridgeUrl,\n\t\t\tSOCKET_IO_PATH,\n\t\t\tREQUEST_CHANNEL,\n\t\t\tEVENT_CHANNEL,\n\t\t);\n\t}\n\n\t/**\n\t * The name of the application.\n\t * This is a read-only property.\n\t */\n\treadonly appName: string;\n\t/**\n\t * The URL of the application.\n\t * This is a read-only property that holds the URL where the application is hosted.\n\t */\n\treadonly appUrl: string;\n\treadonly appIcon: string | undefined;\n\t/**\n\t * The URL of the bridge server used for communication.\n\t * This URL is required to establish a connection between the wallet and the dApp.\n\t */\n\treadonly bridgeUrl: string;\n\t/**\n\t * A readonly property that holds an instance of `TezosWcWalletApp` or `undefined`.\n\t * This property represents the wallet application used for Tezos WalletConnect integration.\n\t */\n\treadonly walletApp: TezosWcWalletApp | undefined;\n\t/**\n\t * The network configuration for the Tezos WalletConnect provider.\n\t * This property is read-only and specifies the network settings\n\t * that the provider will use to interact with the Tezos blockchain.\n\t */\n\treadonly network: TezosWcNetwork;\n\tprivate readonly _apiKey: string;\n\tprivate _communicationController: CommunicationController<TezosWcRequest, TezosWcResponse, TezosWcEvent>;\n\tprivate _sessionId: string | undefined;\n\tprivate _connectionString: string | undefined;\n\n\t/**\n\t * Initiates a permission request to connect to a Tezos wallet using WalletConnect.\n\t *\n\t * If already connected, it will first disconnect before attempting to connect again.\n\t * It sets up an event handler for WalletConnect events and sends a connection request.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the permission request is completed.\n\t *\n\t * @throws {Error} If the connection or permission request fails.\n\t *\n\t * @remarks\n\t * - If the platform is Android, it sends a second reminder to open the WalletConnect link.\n\t * - Emits a 'connectionString' event with the WalletConnect URI.\n\t */\n\tasync permissionRequest(): Promise<void> {\n\t\tif (this._communicationController.connected()) {\n\t\t\tawait this.disconnect();\n\t\t}\n\t\tawait this._communicationController.connect();\n\n\t\tconst connectionStringEventHandler = async (event: TezosWcEvent): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst validatedEvent = validateTezosWcEvent(event);\n\t\t\t\tif (validatedEvent.type === 'connectionString') {\n\t\t\t\t\tthis._communicationController.off('event', connectionStringEventHandler);\n\t\t\t\t\tconst { connectionString } = validatedEvent.payload;\n\t\t\t\t\tthis._connectionString = connectionString;\n\t\t\t\t\tif (this.walletApp) {\n\t\t\t\t\t\t// Android needs a second reminder to open the link\n\t\t\t\t\t\tif (isAndroid()) {\n\t\t\t\t\t\t\topenLink(getConnectionStringUniversalLink(this.walletApp, connectionString), {\n\t\t\t\t\t\t\t\ttry_instant_view: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait sleep(1000);\n\t\t\t\t\t\t\topenLink(getConnectionStringUniversalLink(this.walletApp, connectionString), {\n\t\t\t\t\t\t\t\ttry_instant_view: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\topenLink(getConnectionStringUniversalLink(this.walletApp, connectionString));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.emit('connectionString', connectionString);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\n\t\tthis._communicationController.on('event', connectionStringEventHandler);\n\n\t\tthis._communicationController.on('event', this._createTezosWcEventHandler());\n\n\t\tconst {\n\t\t\tpayload: { sessionId },\n\t\t} = await this._sendTezosWcRequest({\n\t\t\ttype: 'connect',\n\t\t\tpayload: {\n\t\t\t\tapiKey: this._apiKey,\n\t\t\t\tnetwork: this.network,\n\t\t\t\tappName: this.appName,\n\t\t\t\tappUrl: this.appUrl,\n\t\t\t\tappIcon: this.appIcon,\n\t\t\t},\n\t\t});\n\t\tthis._sessionId = sessionId;\n\t}\n\n\t/**\n\t * Checks if the provider is connected.\n\t *\n\t * This method verifies if there is an active session and if the communication\n\t * controller is connected. It then sends a request to check the connection status\n\t * and returns the result.\n\t *\n\t * @returns {Promise<boolean>} A promise that resolves to `true` if connected, otherwise `false`.\n\t */\n\tasync connected(): Promise<boolean> {\n\t\tif (!this._sessionId || !this._communicationController.connected()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst response = await this._sendTezosWcRequest({\n\t\t\ttype: 'connected',\n\t\t\tsessionId: this._getSessionId(),\n\t\t});\n\t\treturn response.payload.connected;\n\t}\n\n\t/**\n\t * Disconnects the current session by sending a disconnect request and performing necessary cleanup.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the disconnection process is complete.\n\t *\n\t * @throws {Error} If there is an issue with sending the disconnect request.\n\t *\n\t * @emits 'disconnect' - Emitted when the disconnection process is complete.\n\t */\n\tasync disconnect(): Promise<void> {\n\t\ttry {\n\t\t\tawait this._sendTezosWcRequest({ type: 'disconnect', sessionId: this._getSessionId() });\n\t\t} finally {\n\t\t\tthis.emit('disconnect', undefined);\n\t\t\tthis._communicationController.disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Serializes the current state of the TConnectTezosWcProvider instance into a JSON string.\n\t *\n\t * @returns {string} A JSON string representing the serialized state of the instance.\n\t */\n\tserialize(): string {\n\t\treturn stringify({\n\t\t\tappName: this.appName,\n\t\t\tappUrl: this.appUrl,\n\t\t\tappIcon: this.appIcon,\n\t\t\tbridgeUrl: this.bridgeUrl,\n\t\t\twalletApp: this.walletApp,\n\t\t\tnetwork: this.network,\n\t\t\t_apiKey: this._apiKey,\n\t\t\t_communicationController: this._communicationController.serialize(),\n\t\t\t_sessionId: this._getSessionId(),\n\t\t\t_connectionString: this._getConnectionString(),\n\t\t} satisfies SerializedTConnectTezosWcProvider);\n\t}\n\n\t/**\n\t * Deserializes a JSON string into an instance of TConnectTezosWcProvider.\n\t *\n\t * @param json - The JSON string to deserialize.\n\t * @returns A promise that resolves to an instance of TConnectTezosWcProvider.\n\t */\n\tstatic async deserialize(json: string): Promise<TConnectTezosWcProvider> {\n\t\tconst data = parse(json) as SerializedTConnectTezosWcProvider;\n\t\tconst provider = new TConnectTezosWcProvider({\n\t\t\tappName: data.appName,\n\t\t\tappUrl: data.appUrl,\n\t\t\tappIcon: data.appIcon,\n\t\t\tbridgeUrl: data.bridgeUrl,\n\t\t\tapiKey: data._apiKey,\n\t\t\twalletApp: data.walletApp,\n\t\t\tnetwork: data.network,\n\t\t});\n\t\tprovider._communicationController = CommunicationController.deserialize(data._communicationController);\n\t\tprovider._sessionId = data._sessionId;\n\t\tprovider._connectionString = data._connectionString;\n\t\tawait provider._reconnect();\n\t\treturn provider;\n\t}\n\n\t/**\n\t * Reconnects the Tezos WalletConnect provider.\n\t *\n\t * This method sets up an event listener for communication events and attempts to reconnect\n\t * to the communication controller. It then sends a reconnect request with the current session ID.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the reconnection process is complete.\n\t * @private\n\t */\n\tprivate async _reconnect(): Promise<void> {\n\t\tthis._communicationController.on('event', this._createTezosWcEventHandler());\n\t\tawait this._communicationController.connect();\n\t\tawait this._sendTezosWcRequest({ type: 'reconnect', sessionId: this._getSessionId() });\n\t}\n\n\t// Start WalletProvider\n\n\t/**\n\t * Retrieves the public key hash (PKH) of the connected account.\n\t *\n\t * @returns {Promise<string>} A promise that resolves to the PKH of the connected account.\n\t * @throws {Error} If there is an issue retrieving the accounts.\n\t */\n\tasync getPKH(): Promise<string> {\n\t\tconst accounts = await this._getAccounts();\n\t\treturn accounts.address;\n\t}\n\n\t/**\n\t * Retrieves the public key (PK) of the account.\n\t *\n\t * @returns {Promise<string>} A promise that resolves to the public key of the account.\n\t * @throws {Error} If there is an issue retrieving the accounts.\n\t */\n\tasync getPK(): Promise<string> {\n\t\tconst accounts = await this._getAccounts();\n\t\treturn accounts.pubkey;\n\t}\n\n\t/**\n\t * Maps transfer parameters to wallet parameters.\n\t *\n\t * This function takes a function that returns a promise of `WalletTransferParams`,\n\t * retrieves the transfer parameters, and maps them to the wallet parameters format.\n\t *\n\t * @param params - A function that returns a promise of `WalletTransferParams`.\n\t * @returns A promise that resolves to the wallet parameters.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tasync mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>): Promise<any> {\n\t\tconst transferParameters = await params();\n\t\tconsole.log('mapTransferParamsToWalletParams()', transferParameters);\n\t\treturn {\n\t\t\taccount: await this.getPKH(),\n\t\t\toperations: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'transaction',\n\t\t\t\t\tamount: transferParameters.amount,\n\t\t\t\t\tdestination: transferParameters.to,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapTransferTicketParamsToWalletParams(params: () => Promise<WalletTransferTicketParams>): Promise<any> {\n\t\tthrow new Error('mapTransferTicketParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapStakeParamsToWalletParams(params: () => Promise<WalletStakeParams>): Promise<any> {\n\t\tthrow new Error('mapStakeParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapUnstakeParamsToWalletParams(params: () => Promise<WalletUnstakeParams>): Promise<any> {\n\t\tthrow new Error('mapUnstakeParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapFinalizeUnstakeParamsToWalletParams(params: () => Promise<WalletFinalizeUnstakeParams>): Promise<any> {\n\t\tthrow new Error('mapFinalizeUnstakeParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>): Promise<any> {\n\t\tthrow new Error('mapOriginateParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>): Promise<any> {\n\t\tthrow new Error('mapDelegateParamsToWalletParams not implemented.');\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n\tmapIncreasePaidStorageWalletParams(params: () => Promise<WalletIncreasePaidStorageParams>): Promise<any> {\n\t\tthrow new Error('mapIncreasePaidStorageWalletParams not implemented.');\n\t}\n\n\t/**\n\t * Sends Tezos operations to the connected wallet.\n\t *\n\t * @param params - An array of parameters for the Tezos operation.\n\t * @returns A promise that resolves to the operation hash as a string.\n\t * @throws Will throw an error if the response payload is not a valid tezos_send result.\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tasync sendOperations(params: any[]): Promise<string> {\n\t\tconsole.log('sendOperations()', params);\n\t\tconst response = await this._sendTezosWcRequest({\n\t\t\ttype: 'request',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: {\n\t\t\t\tmethod: 'tezos_send',\n\t\t\t\tparams: params[0],\n\t\t\t},\n\t\t});\n\t\tif (!isSendResult(response.payload)) {\n\t\t\tthrow new Error('Invalid tezos_send response');\n\t\t}\n\t\treturn response.payload.operationHash;\n\t}\n\n\t/**\n\t * Signs the given bytes with an optional watermark.\n\t *\n\t * @param bytes - The hex string representation of the bytes to be signed.\n\t * @param watermark - An optional Uint8Array representing the watermark.\n\t *                    If provided, it must be of length 1 and the first element must be 3.\n\t * @returns A promise that resolves to the signed payload as a hex string.\n\t * @throws Will throw an error if the watermark is provided but not supported.\n\t */\n\tasync sign(bytes: string, watermark?: Uint8Array): Promise<string> {\n\t\tif (watermark?.length !== 1 || watermark[0] !== 3) {\n\t\t\tthrow new Error('Watermark is not supported');\n\t\t}\n\t\tconst bytesBuffer = Buffer.concat([Buffer.from(watermark), Buffer.from(bytes, 'hex')]);\n\t\tconst watermarkedBytes = bytesBuffer.toString('hex');\n\t\treturn this.requestSignPayload({\n\t\t\tpayload: watermarkedBytes,\n\t\t\tsigningType: 'operation',\n\t\t\tsourceAddress: await this.getPKH(),\n\t\t});\n\t}\n\n\t// End WalletProvider\n\n\t/**\n\t * Requests the signing of a payload using the specified signing type.\n\t *\n\t * @param input - The input parameters for the signing request.\n\t * @param input.signingType - The type of signing to be performed. Can be 'operation' or 'micheline'.\n\t * @param input.payload - The payload to be signed. Must start with '03' for 'operation' or '05' for 'micheline'.\n\t * @param input.sourceAddress - The source address for the signing request. If not provided, the default account address will be used.\n\t * @returns A promise that resolves to the signature string.\n\t * @throws Will throw an error if the payload does not start with the correct prefix for the specified signing type.\n\t * @throws Will throw an error if the response payload is not a valid sign result.\n\t */\n\tasync requestSignPayload(input: RequestSignPayloadInput): Promise<string> {\n\t\tconst { signingType, payload, sourceAddress } = input;\n\t\tswitch (signingType) {\n\t\t\tcase 'operation': {\n\t\t\t\tif (!payload.startsWith('03')) {\n\t\t\t\t\tthrow new Error('When using signing type \"operation\", the payload must start with prefix \"03\"');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'micheline': {\n\t\t\t\tif (!payload.startsWith('05')) {\n\t\t\t\t\tthrow new Error('When using signing type \"micheline\", the payload must start with prefix \"05\"');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst response = await this._sendTezosWcRequest({\n\t\t\ttype: 'request',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: {\n\t\t\t\tmethod: 'tezos_sign',\n\t\t\t\tparams: {\n\t\t\t\t\taccount: sourceAddress ?? (await this.getPKH()),\n\t\t\t\t\tpayload,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tif (!isSignResult(response.payload)) {\n\t\t\tthrow new Error('Invalid response');\n\t\t}\n\t\treturn response.payload.signature;\n\t}\n\n\t/**\n\t * Creates an event handler for Tezos WalletConnect events.\n\t *\n\t * This handler processes events of type `TezosWcEvent` and performs actions\n\t * based on the event type. It validates the event and then handles the following\n\t * event types:\n\t *\n\t * - `connect`: Resolves the permission request callback with the session ID from the event payload.\n\t * - `disconnect`: Emits a 'disconnect' event.\n\t *\n\t * If an error occurs during event validation or handling, it logs the error to the console.\n\t *\n\t * @returns A function that handles `TezosWcEvent` events.\n\t * @private\n\t */\n\tprivate _createTezosWcEventHandler() {\n\t\treturn (event: TezosWcEvent): void => {\n\t\t\ttry {\n\t\t\t\tconst validatedEvent = validateTezosWcEvent(event);\n\t\t\t\tswitch (validatedEvent.type) {\n\t\t\t\t\tcase 'disconnect': {\n\t\t\t\t\t\tthis.emit('disconnect', undefined);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Retrieves the Tezos accounts associated with the current session.\n\t *\n\t * This method sends a request to the Tezos WalletConnect provider to get the accounts\n\t * and returns the first account from the response payload.\n\t *\n\t * @returns {Promise<GetAccountsResult[0]>} A promise that resolves to the first account in the response payload.\n\t * @throws {Error} If the response payload is not a valid `tezos_getAccounts` result.\n\t * @private\n\t */\n\tprivate async _getAccounts(): Promise<GetAccountsResult[0]> {\n\t\tconst response = await this._sendTezosWcRequest({\n\t\t\ttype: 'request',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: { method: 'tezos_getAccounts', params: {} },\n\t\t});\n\t\tif (!isGetAccountsResult(response.payload)) {\n\t\t\tthrow new Error('Invalid tezos_getAccounts response');\n\t\t}\n\t\treturn response.payload[0];\n\t}\n\n\t/**\n\t * Sends a Tezos WalletConnect request and handles the response.\n\t *\n\t * @param tezosRequest - The Tezos WalletConnect request to be sent.\n\t * @returns A promise that resolves to a Tezos WalletConnect response.\n\t * @throws Will throw an error if there is no connection, if the response type is different from the request type,\n\t * or if the response contains an error.\n\t * @private\n\t */\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcConnectRequest): Promise<TezosWcConnectResponse>;\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcConnectedRequest): Promise<TezosWcConnectedResponse>;\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcRequestRequest): Promise<TezosWcRequestResponse>;\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcReconnectRequest): Promise<TezosWcReconnectResponse>;\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcDisconnectRequest): Promise<TezosWcDisconnectResponse>;\n\tprivate async _sendTezosWcRequest(tezosRequest: TezosWcRequest): Promise<TezosWcResponse> {\n\t\tif (!this._communicationController.connected()) {\n\t\t\tthrow new Error(\"Can't send request without connection\");\n\t\t}\n\t\tif (this.walletApp && tezosRequest.type === 'request') {\n\t\t\tswitch (tezosRequest.payload.method) {\n\t\t\t\tcase 'tezos_send':\n\t\t\t\tcase 'tezos_sign': {\n\t\t\t\t\topenLink(getUniversalLink(this.walletApp));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst tezosResponse = await this._communicationController.send(tezosRequest);\n\t\tconst validatedTezosResponse = validateTezosWcResponse(tezosResponse);\n\t\tif (validatedTezosResponse.type === 'error') {\n\t\t\tif (validatedTezosResponse.payload.type === 'generic') {\n\t\t\t\tlet errorMessage = `Error Code: ${validatedTezosResponse.payload.key}`;\n\t\t\t\tif (validatedTezosResponse.payload.message) {\n\t\t\t\t\terrorMessage += `: ${validatedTezosResponse.payload.message}`;\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t} else {\n\t\t\t\tthrow new TezosWcError(\n\t\t\t\t\tvalidatedTezosResponse.payload.type,\n\t\t\t\t\tgetErrorMessage(validatedTezosResponse.payload.type, validatedTezosResponse.payload.message),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (tezosRequest.type !== validatedTezosResponse.type) {\n\t\t\tthrow new Error('Response type is different from request type');\n\t\t}\n\t\treturn tezosResponse;\n\t}\n\n\t/**\n\t * Retrieves the current session ID.\n\t *\n\t * @returns {string} The session ID.\n\t * @throws {Error} If the session ID is not set.\n\t * @private\n\t */\n\tprivate _getSessionId(): string {\n\t\tif (!this._sessionId) {\n\t\t\tthrow new Error('Session ID is not set');\n\t\t}\n\t\treturn this._sessionId;\n\t}\n\n\t/**\n\t * Retrieves the WalletConnect URI.\n\t *\n\t * @returns {string} The WalletConnect URI.\n\t * @throws {Error} If the WalletConnect URI is not set.\n\t * @private\n\t */\n\tprivate _getConnectionString(): string {\n\t\tif (!this._connectionString) {\n\t\t\tthrow new Error('Connection string is not set');\n\t\t}\n\t\treturn this._connectionString;\n\t}\n}\n"]}