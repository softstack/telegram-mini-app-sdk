{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { validateSchema, validateType } from '@tconnect.io/core';\nimport { TezosWcErrorResponse, TezosWcEvent, TezosWcResponse } from '@tconnect.io/tezos-wc-api-types';\nimport Joi from 'joi';\nimport { GetAccountsResult, SendResult, SignResult } from './types';\n\n/**\n * Validates a Tezos WalletConnect response or error response.\n *\n * This function uses Joi schema validation to ensure that the provided value\n * conforms to one of the expected response or error response formats.\n *\n * The valid response types are:\n * - `error`: An error response with a payload that can be either a generic error or specific error types.\n * - `connect`: A response indicating a connection attempt with session details.\n * - `connected`: A response indicating a successful connection.\n * - `request`: A response containing a request payload.\n * - `reconnect`: A response indicating a reconnection attempt.\n * - `disconnect`: A response indicating a disconnection.\n *\n * @param value - The Tezos WalletConnect response or error response to validate.\n * @returns The validated Tezos WalletConnect response or error response.\n */\nexport const validateTezosWcResponse = (\n\tvalue: TezosWcResponse | TezosWcErrorResponse,\n): TezosWcResponse | TezosWcErrorResponse =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives()\n\t\t\t.try(\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('error').required(),\n\t\t\t\t\tpayload: Joi.alternatives().try(\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('generic').required(),\n\t\t\t\t\t\t\tkey: Joi.string().required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow(''),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('invalidSessionId', 'invalidApiKey', 'walletRequestFailed').required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow('').required(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connect').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tsessionId: Joi.string().required(),\n\t\t\t\t\t\twalletConnectUri: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connected').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tconnected: Joi.boolean().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('request').required(),\n\t\t\t\t\tpayload: Joi.any().required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('reconnect').required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.required(),\n\t);\n\n/**\n * Validates a Tezos WalletConnect event against a predefined schema.\n *\n * @param value - The Tezos WalletConnect event to validate.\n * @returns The validated Tezos WalletConnect event.\n *\n * The function uses Joi to validate the event. The event must be an object\n * with a `type` property that is a string and must be 'connect'. The `payload`\n * property must be an object containing a `sessionId` string.\n */\nexport const validateTezosWcEvent = (value: TezosWcEvent): TezosWcEvent =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives()\n\t\t\t.try(\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connect').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tsessionId: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.required(),\n\t);\n\n/**\n * Validates if the provided value conforms to the GetAccountsResult type.\n *\n * @param value - The value to be validated.\n * @returns A boolean indicating whether the value is a valid GetAccountsResult.\n */\nexport const isGetAccountsResult = (value: unknown): value is GetAccountsResult =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.array()\n\t\t\t.length(1)\n\t\t\t.items(\n\t\t\t\tJoi.object({\n\t\t\t\t\taddress: Joi.string().required(),\n\t\t\t\t\tpubkey: Joi.string().required(),\n\t\t\t\t\talgo: Joi.string().required(),\n\t\t\t\t}).options({ allowUnknown: true }),\n\t\t\t),\n\t);\n\n/**\n * Checks if the provided value is a valid SignResult.\n *\n * This function uses Joi schema validation to determine if the value\n * has the required structure of a SignResult, which includes a mandatory\n * `signature` property of type string. The validation allows for unknown\n * properties to be present in the object.\n *\n * @param value - The value to be checked.\n * @returns A boolean indicating whether the value is a SignResult.\n */\nexport const isSignResult = (value: unknown): value is SignResult =>\n\tvalidateType(value, Joi.object({ signature: Joi.string().required() }).options({ allowUnknown: true }));\n\n/**\n * Checks if the provided value is of type `SendResult`.\n *\n * This function uses Joi validation to determine if the value matches the expected structure\n * of a `SendResult` object, which requires an `operationHash` string property. The validation\n * allows for unknown properties to be present in the object.\n *\n * @param value - The value to be checked.\n * @returns `true` if the value is a `SendResult`, otherwise `false`.\n */\nexport const isSendResult = (value: unknown): value is SendResult =>\n\tvalidateType(value, Joi.object({ operationHash: Joi.string().required() }).options({ allowUnknown: true }));\n"]}