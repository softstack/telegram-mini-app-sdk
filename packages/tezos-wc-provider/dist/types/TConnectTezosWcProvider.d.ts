import { WalletDelegateParams, WalletFinalizeUnstakeParams, WalletIncreasePaidStorageParams, WalletOriginateParams, WalletProvider, WalletStakeParams, WalletTransferParams, WalletTransferTicketParams, WalletUnstakeParams } from '@taquito/taquito';
import { TypedEvent } from '@tconnect.io/core';
import { TezosWcNetwork } from '@tconnect.io/tezos-wc-api-types';
import { RequestSignPayloadInput, TConnectTezosWcProviderEvents, TConnectTezosWcProviderOptions, TezosWcWalletApp } from './types';
export declare class TConnectTezosWcProvider extends TypedEvent<TConnectTezosWcProviderEvents> implements WalletProvider {
    constructor(options: TConnectTezosWcProviderOptions);
    readonly appName: string;
    readonly appUrl: string;
    readonly appIcon: string | undefined;
    readonly bridgeUrl: string;
    readonly walletApp: TezosWcWalletApp | undefined;
    readonly network: TezosWcNetwork;
    private readonly _apiKey;
    private _communicationController;
    private _sessionId;
    private _connectionString;
    permissionRequest(): Promise<void>;
    connected(): Promise<boolean>;
    disconnect(): Promise<void>;
    serialize(): string;
    static deserialize(json: string): Promise<TConnectTezosWcProvider>;
    private _reconnect;
    getPKH(): Promise<string>;
    getPK(): Promise<string>;
    mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>): Promise<any>;
    mapTransferTicketParamsToWalletParams(params: () => Promise<WalletTransferTicketParams>): Promise<any>;
    mapStakeParamsToWalletParams(params: () => Promise<WalletStakeParams>): Promise<any>;
    mapUnstakeParamsToWalletParams(params: () => Promise<WalletUnstakeParams>): Promise<any>;
    mapFinalizeUnstakeParamsToWalletParams(params: () => Promise<WalletFinalizeUnstakeParams>): Promise<any>;
    mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>): Promise<any>;
    mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>): Promise<any>;
    mapIncreasePaidStorageWalletParams(params: () => Promise<WalletIncreasePaidStorageParams>): Promise<any>;
    sendOperations(params: any[]): Promise<string>;
    sign(bytes: string, watermark?: Uint8Array): Promise<string>;
    requestSignPayload(input: RequestSignPayloadInput): Promise<string>;
    private _createTezosWcEventHandler;
    private _getAccounts;
    private _sendTezosWcRequest;
    private _getSessionId;
    private _getConnectionString;
}
