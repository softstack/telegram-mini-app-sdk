{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAA,8CAAgD;AAIhD,+CAAwC;AAQjC,MAAM,SAAS,GAAG,GAAY,EAAE;IACtC,MAAM,MAAM,GAAG,IAAI,uBAAQ,EAAE,CAAC;IAC9B,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC,CAAC;AAHW,QAAA,SAAS,aAGpB;AAUK,MAAM,cAAc,GAAG,GAAY,EAAE;IAC3C,MAAM,MAAM,GAAG,IAAI,uBAAQ,EAAE,CAAC;IAC9B,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC5D,CAAC,CAAC;AAHW,QAAA,cAAc,kBAGzB;AAOK,MAAM,kBAAkB,GAAG,GAAgC,EAAE;IACnE,MAAM,MAAM,GAAG,IAAI,uBAAQ,EAAE,CAAC;IAC9B,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;IAC/B,IAAI,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACnC,OAAO,SAAS,CAAC;IAClB,CAAC;SAAM,IAAI,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC;IACd,CAAC;AACF,CAAC,CAAC;AARW,QAAA,kBAAkB,sBAQ7B;AAmBK,MAAM,eAAe,GAAG,CAC9B,SAAqF,EACrF,OAAe,EACN,EAAE;IACX,IAAI,OAAO,EAAE,CAAC;QACb,OAAO,OAAO,CAAC;IAChB,CAAC;IACD,QAAQ,SAAS,EAAE,CAAC;QACnB,KAAK,eAAe,CAAC,CAAC,CAAC;YACtB,OAAO,iBAAiB,CAAC;QAC1B,CAAC;QACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACzB,OAAO,oBAAoB,CAAC;QAC7B,CAAC;QACD,KAAK,qBAAqB,CAAC,CAAC,CAAC;YAC5B,OAAO,uBAAuB,CAAC;QAChC,CAAC;IACF,CAAC;AACF,CAAC,CAAC;AAlBW,QAAA,eAAe,mBAkB1B;AAEK,MAAM,UAAU,GAAG,GAAW,EAAE;IACtC,MAAM,GAAG,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;SAC7F,GAAG,CAAC,UAAU,MAAM;QACpB,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC;SACD,IAAI,CAAC,GAAG,CAAC,CAAC;AACb,CAAC,CAAC;AAPW,QAAA,UAAU,cAOrB","sourcesContent":["import { randomBytes } from '@stablelib/random';\nimport { EvmErrorType } from '@tconnect.io/evm-api-types';\nimport { TezosBeaconErrorType } from '@tconnect.io/tezos-beacon-api-types';\nimport { TezosWcErrorType } from '@tconnect.io/tezos-wc-api-types';\nimport { UAParser } from 'ua-parser-js';\nimport { OperatingSystem } from './types';\n\n/**\n * Determines if the current operating system is Android.\n *\n * @returns {boolean} `true` if the operating system is Android, otherwise `false`.\n */\nexport const isAndroid = (): boolean => {\n\tconst parser = new UAParser();\n\treturn !!parser.getOS().name?.match(/android/i);\n};\n\n/**\n * Checks if the current browser is Mobile Safari.\n *\n * This function uses the UAParser library to parse the user agent string\n * and determine if the browser is Mobile Safari.\n *\n * @returns {boolean} `true` if the browser is Mobile Safari, otherwise `false`.\n */\nexport const isMobileSafari = (): boolean => {\n\tconst parser = new UAParser();\n\treturn !!parser.getBrowser().name?.match(/mobile safari/i);\n};\n\n/**\n * Determines the operating system of the user's device.\n *\n * @returns {OperatingSystem | undefined} The operating system, either 'android' or 'ios', or undefined if the OS is not recognized.\n */\nexport const getOperatingSystem = (): OperatingSystem | undefined => {\n\tconst parser = new UAParser();\n\tconst os = parser.getOS().name;\n\tif (os?.match(/^Android(-x86)?$/)) {\n\t\treturn 'android';\n\t} else if (os?.match(/^iOS$/)) {\n\t\treturn 'ios';\n\t}\n};\n\n/**\n * Returns a specific error message based on the provided error type and message.\n *\n * @param errorType - The type of error, excluding 'generic'.\n * @param message - The custom error message to return if provided.\n * @returns The error message string.\n *\n * @remarks\n * If a custom message is provided, it will be returned. Otherwise, a predefined message\n * based on the error type will be returned.\n *\n * @example\n * ```typescript\n * const errorMessage = getErrorMessage('invalidApiKey', '');\n * console.log(errorMessage); // Output: 'Invalid API key'\n * ```\n */\nexport const getErrorMessage = (\n\terrorType: Exclude<EvmErrorType | TezosBeaconErrorType | TezosWcErrorType, 'generic'>,\n\tmessage: string,\n): string => {\n\tif (message) {\n\t\treturn message;\n\t}\n\tswitch (errorType) {\n\t\tcase 'invalidApiKey': {\n\t\t\treturn 'Invalid API key';\n\t\t}\n\t\tcase 'invalidSessionId': {\n\t\t\treturn 'Invalid session ID';\n\t\t}\n\t\tcase 'walletRequestFailed': {\n\t\t\treturn 'Wallet request failed';\n\t\t}\n\t}\n};\n\nexport const randomUUID = (): string => {\n\tconst buf = randomBytes(16);\n\treturn [buf.slice(0, 4), buf.slice(4, 6), buf.slice(6, 8), buf.slice(8, 10), buf.slice(10, 16)]\n\t\t.map(function (subbuf) {\n\t\t\treturn Buffer.from(subbuf).toString('hex');\n\t\t})\n\t\t.join('-');\n};\n"]}