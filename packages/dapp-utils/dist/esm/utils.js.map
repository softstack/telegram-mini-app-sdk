{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,MAAM,CAAC,MAAM,SAAS,GAAG,GAAY,EAAE;IACtC,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAY,EAAE;IAC3C,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAgC,EAAE;IACnE,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;IAC/B,IAAI,EAAE,EAAE,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACnC,OAAO,SAAS,CAAC;IAClB,CAAC;SAAM,IAAI,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC;IACd,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAC9B,SAAqF,EACrF,OAAe,EACN,EAAE;IACX,IAAI,OAAO,EAAE,CAAC;QACb,OAAO,OAAO,CAAC;IAChB,CAAC;IACD,QAAQ,SAAS,EAAE,CAAC;QACnB,KAAK,eAAe,CAAC,CAAC,CAAC;YACtB,OAAO,iBAAiB,CAAC;QAC1B,CAAC;QACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;YACzB,OAAO,oBAAoB,CAAC;QAC7B,CAAC;QACD,KAAK,qBAAqB,CAAC,CAAC,CAAC;YAC5B,OAAO,uBAAuB,CAAC;QAChC,CAAC;IACF,CAAC;AACF,CAAC,CAAC","sourcesContent":["import { EvmErrorType } from '@tconnect.io/evm-api-types';\nimport { TezosBeaconErrorType } from '@tconnect.io/tezos-beacon-api-types';\nimport { TezosWcErrorType } from '@tconnect.io/tezos-wc-api-types';\nimport { UAParser } from 'ua-parser-js';\nimport { OperatingSystem } from './types';\n\nexport const isAndroid = (): boolean => {\n\tconst parser = new UAParser();\n\treturn !!parser.getOS().name?.match(/android/i);\n};\n\nexport const isMobileSafari = (): boolean => {\n\tconst parser = new UAParser();\n\treturn !!parser.getBrowser().name?.match(/mobile safari/i);\n};\n\nexport const getOperatingSystem = (): OperatingSystem | undefined => {\n\tconst parser = new UAParser();\n\tconst os = parser.getOS().name;\n\tif (os?.match(/^Android(-x86)?$/)) {\n\t\treturn 'android';\n\t} else if (os?.match(/^iOS$/)) {\n\t\treturn 'ios';\n\t}\n};\n\nexport const getErrorMessage = (\n\terrorType: Exclude<EvmErrorType | TezosBeaconErrorType | TezosWcErrorType, 'generic'>,\n\tmessage: string,\n): string => {\n\tif (message) {\n\t\treturn message;\n\t}\n\tswitch (errorType) {\n\t\tcase 'invalidApiKey': {\n\t\t\treturn 'Invalid API key';\n\t\t}\n\t\tcase 'invalidSessionId': {\n\t\t\treturn 'Invalid session ID';\n\t\t}\n\t\tcase 'walletRequestFailed': {\n\t\t\treturn 'Wallet request failed';\n\t\t}\n\t}\n};\n"]}