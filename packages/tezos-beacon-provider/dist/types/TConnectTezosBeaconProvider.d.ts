import { WalletDelegateParams, WalletFinalizeUnstakeParams, WalletIncreasePaidStorageParams, WalletOriginateParams, WalletProvider, WalletStakeParams, WalletTransferParams, WalletTransferTicketParams, WalletUnstakeParams } from '@taquito/taquito';
import { TypedEvent } from '@tconnect.io/core';
import { Network, PartialTezosDelegationOperation, PartialTezosIncreasePaidStorageOperation, PartialTezosOperation, PartialTezosOriginationOperation, PartialTezosTransactionOperation, PartialTezosTransferTicketOperation, RequestSignPayloadInput, SignPayloadResponse, TConnectTezosBeaconProviderEvents, TConnectTezosBeaconProviderOptions, TezosBeaconWalletApp } from './types';
export declare class TConnectTezosBeaconProvider extends TypedEvent<TConnectTezosBeaconProviderEvents> implements WalletProvider {
    constructor(options: TConnectTezosBeaconProviderOptions);
    readonly appName: string;
    readonly appUrl: string;
    readonly appIcon: string | undefined;
    readonly network: Network;
    readonly bridgeUrl: string;
    readonly walletApp: TezosBeaconWalletApp | undefined;
    private readonly _secretSeed;
    private readonly _apiKey;
    private readonly _communicationKeyPair;
    private _communicationController;
    private _sessionId;
    private _otherPublicKey;
    private _permissionRequestCallbacks;
    private _operationRequestCallbacks;
    private _signPayloadRequestCallbacks;
    private _publicKey;
    permissionRequest(): Promise<void>;
    getPKH(): Promise<string>;
    getPK(): Promise<string>;
    mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>): Promise<PartialTezosTransactionOperation>;
    mapTransferTicketParamsToWalletParams(params: () => Promise<WalletTransferTicketParams>): Promise<PartialTezosTransferTicketOperation>;
    mapStakeParamsToWalletParams(params: () => Promise<WalletStakeParams>): Promise<PartialTezosTransactionOperation>;
    mapUnstakeParamsToWalletParams(params: () => Promise<WalletUnstakeParams>): Promise<PartialTezosTransactionOperation>;
    mapFinalizeUnstakeParamsToWalletParams(params: () => Promise<WalletFinalizeUnstakeParams>): Promise<PartialTezosTransactionOperation>;
    mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>): Promise<PartialTezosOriginationOperation>;
    mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>): Promise<PartialTezosDelegationOperation>;
    mapIncreasePaidStorageWalletParams(params: () => Promise<WalletIncreasePaidStorageParams>): Promise<PartialTezosIncreasePaidStorageOperation>;
    sendOperations(params: Array<PartialTezosOperation>): Promise<string>;
    sign(bytes: string, watermark?: Uint8Array): Promise<string>;
    requestSignPayload(input: RequestSignPayloadInput): Promise<SignPayloadResponse>;
    connected(): boolean;
    disconnect(): Promise<void>;
    serialize(): string;
    static deserialize(serialized: string): Promise<TConnectTezosBeaconProvider>;
    private _reconnect;
    private _createTezosBeaconEventHandler;
    private _sendTezosMessage;
    private _sendTezosBeaconRequest;
    private _getPublicKey;
    private _getSessionId;
    private _getOtherPublicKey;
}
