{"version":3,"file":"TConnectTezosBeaconProvider.js","sourceRoot":"","sources":["../../src/TConnectTezosBeaconProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { hash } from '@stablelib/blake2b';\nimport { generateKeyPairFromSeed, KeyPair, sign } from '@stablelib/ed25519';\nimport { encode } from '@stablelib/utf8';\nimport {\n\tWalletDelegateParams,\n\tWalletFinalizeUnstakeParams,\n\tWalletIncreasePaidStorageParams,\n\tWalletOriginateParams,\n\tWalletProvider,\n\tWalletStakeParams,\n\tWalletTransferParams,\n\tWalletTransferTicketParams,\n\tWalletUnstakeParams,\n} from '@taquito/taquito';\nimport { CallbackController, parse, stringify, TypedEvent } from '@tconnect.io/core';\nimport { CommunicationController } from '@tconnect.io/dapp-communication';\nimport { getErrorMessage } from '@tconnect.io/dapp-utils';\nimport {\n\tEVENT_CHANNEL,\n\tREQUEST_CHANNEL,\n\tSOCKET_IO_PATH,\n\tTezosBeaconDisconnectRequest,\n\tTezosBeaconDisconnectResponse,\n\tTezosBeaconError,\n\tTezosBeaconEvent,\n\tTezosBeaconInitRequest,\n\tTezosBeaconInitResponse,\n\tTezosBeaconLoginRequest,\n\tTezosBeaconLoginResponse,\n\tTezosBeaconMessageRequest,\n\tTezosBeaconMessageResponse,\n\tTezosBeaconReconnectRequest,\n\tTezosBeaconReconnectResponse,\n\tTezosBeaconRequest,\n\tTezosBeaconResponse,\n} from '@tconnect.io/tezos-beacon-api-types';\nimport WebApp from '@twa-dev/sdk';\nimport bs58check from 'bs58check';\nimport {\n\tDisconnectMessageInput,\n\tNetwork,\n\tOperationRequestInput,\n\tOperationResponse,\n\tPartialTezosDelegationOperation,\n\tPartialTezosIncreasePaidStorageOperation,\n\tPartialTezosOperation,\n\tPartialTezosOriginationOperation,\n\tPartialTezosTransactionOperation,\n\tPartialTezosTransferTicketOperation,\n\tPermissionRequest,\n\tPermissionRequestInput,\n\tRequestSignPayloadInput,\n\tSerializedTConnectTezosBeaconProvider,\n\tSignPayloadRequestInput,\n\tSignPayloadResponse,\n\tTConnectTezosBeaconProviderEvents,\n\tTConnectTezosBeaconProviderOptions,\n\tTezosBeaconWalletApp,\n} from './types';\nimport { formatTransactionAmount, toIntegerString } from './utils/base';\nimport {\n\tcreateCryptoBoxClient,\n\tcreateCryptoBoxServer,\n\tdecryptCryptoboxPayload,\n\tencryptCryptoboxPayload,\n\tgetAddressFromPublicKey,\n\tgetConnectionStringUniversalLink,\n\tgetSenderId,\n\tgetUniversalLink,\n\topenCryptobox,\n\ttoHex,\n} from './utils/utils';\nimport {\n\tisDisconnectMessage,\n\tisErrorResponse,\n\tisOperationResponse,\n\tisPairingResponse,\n\tisPermissionResponse,\n\tisSignPayloadResponse,\n\tvalidateTezosBeaconEvent,\n\tvalidateTezosBeaconResponse,\n} from './validation';\n\n/**\n * The `TConnectTezosBeaconProvider` class provides an implementation of a wallet provider\n * for interacting with the Tezos blockchain using the Beacon protocol. It extends the\n * `TypedEvent` class and implements the `WalletProvider` interface.\n *\n * @class\n * @extends {TypedEvent<TConnectTezosBeaconProviderEvents>}\n * @implements {WalletProvider}\n */\nexport class TConnectTezosBeaconProvider\n\textends TypedEvent<TConnectTezosBeaconProviderEvents>\n\timplements WalletProvider\n{\n\t/**\n\t * Creates an instance of TConnectTezosBeaconProvider.\n\t *\n\t * @param options - The options for configuring the Tezos Beacon Provider.\n\t * @param options.appName - The name of the application.\n\t * @param options.appUrl - The URL of the application.\n\t * @param options.secretSeed - The secret seed used for generating the communication key pair.\n\t * @param options.apiKey - The API key for authentication.\n\t * @param options.network - The network configuration (optional, defaults to mainnet).\n\t * @param options.bridgeUrl - The URL of the bridge server.\n\t * @param options.walletApp - The wallet application instance.\n\t */\n\tconstructor(options: TConnectTezosBeaconProviderOptions) {\n\t\tsuper();\n\t\tthis.appName = options.appName;\n\t\tthis.appUrl = options.appUrl;\n\t\tthis.appIcon = options.appIcon;\n\t\tthis._secretSeed = options.secretSeed;\n\t\tthis._apiKey = options.apiKey;\n\t\t// this._genericWalletUrl = options.genericWalletUrl ?? GENERIC_WALLET_URL;\n\t\tthis.network = options.network ?? { type: 'mainnet' };\n\t\tthis.bridgeUrl = options.bridgeUrl;\n\t\tthis.walletApp = options.walletApp;\n\t\tthis._communicationKeyPair = generateKeyPairFromSeed(hash(encode(this._secretSeed), 32));\n\t\tthis._communicationController = new CommunicationController(\n\t\t\tthis.bridgeUrl,\n\t\t\tSOCKET_IO_PATH,\n\t\t\tREQUEST_CHANNEL,\n\t\t\tEVENT_CHANNEL,\n\t\t);\n\t}\n\n\t/**\n\t * The name of the application using the Tezos Beacon provider.\n\t * This is a read-only property.\n\t */\n\treadonly appName: string;\n\t/**\n\t * The URL of the application that is using the Tezos Beacon provider.\n\t * This URL is used to identify the application during the connection process.\n\t */\n\treadonly appUrl: string;\n\treadonly appIcon: string | undefined;\n\t/**\n\t * The network configuration for the Tezos Beacon provider.\n\t * This property is read-only and provides details about the network\n\t * to which the provider is connected.\n\t */\n\treadonly network: Network;\n\t/**\n\t * The URL of the bridge server used for communication with the Tezos Beacon network.\n\t * This URL is required to establish a connection and interact with the Tezos blockchain.\n\t */\n\treadonly bridgeUrl: string;\n\t/**\n\t * The wallet application instance for the Tezos Beacon provider.\n\t * This property holds an instance of `TezosBeaconWalletApp` if available,\n\t * otherwise it is `undefined`.\n\t */\n\treadonly walletApp: TezosBeaconWalletApp | undefined;\n\tprivate readonly _secretSeed: string;\n\tprivate readonly _apiKey: string;\n\tprivate readonly _genericWalletUrl: string = '';\n\tprivate readonly _communicationKeyPair: KeyPair;\n\tprivate _communicationController: CommunicationController<TezosBeaconRequest, TezosBeaconResponse, TezosBeaconEvent>;\n\tprivate _sessionId: string | undefined;\n\tprivate _otherPublicKey: Buffer | undefined;\n\tprivate _permissionRequestCallbacks = new CallbackController<void>(1000 * 60 * 60);\n\tprivate _operationRequestCallbacks = new CallbackController<OperationResponse>(1000 * 60 * 60);\n\tprivate _signPayloadRequestCallbacks = new CallbackController<SignPayloadResponse>(1000 * 60 * 60);\n\tprivate _publicKey: string | undefined;\n\n\t/**\n\t * Initiates a permission request to the Tezos Beacon network.\n\t *\n\t * This method performs the following steps:\n\t * 1. Connects to the communication controller.\n\t * 2. Sends an initialization request to the Tezos Beacon network.\n\t * 3. Signs the login digest with the communication key pair.\n\t * 4. Sends a login request to the Tezos Beacon network.\n\t * 5. Generates a unique permission request ID.\n\t * 6. Adds a callback for the permission request.\n\t * 7. Sets up an event handler for communication events.\n\t * 8. Opens a link to the wallet app if available.\n\t * 9. Emits the connection string event.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the permission request is completed.\n\t *\n\t * @throws {Error} If any step in the process fails.\n\t */\n\tasync permissionRequest(): Promise<void> {\n\t\tawait this._communicationController.connect();\n\t\tconst initResponse = await this._sendTezosBeaconRequest({\n\t\t\ttype: 'init',\n\t\t\tpayload: {\n\t\t\t\tapiKey: this._apiKey,\n\t\t\t\tappName: this.appName,\n\t\t\t\tappUrl: this.appUrl,\n\t\t\t\tappIcon: this.appIcon,\n\t\t\t\tpublicKey: Buffer.from(this._communicationKeyPair.publicKey).toString('hex'),\n\t\t\t},\n\t\t});\n\t\tthis._sessionId = initResponse.payload.sessionId;\n\t\tconst rawSignature = Buffer.from(\n\t\t\tsign(this._communicationKeyPair.secretKey, Buffer.from(initResponse.payload.loginRawDigest, 'hex')),\n\t\t).toString('hex');\n\t\tconst loginResponse = await this._sendTezosBeaconRequest({\n\t\t\ttype: 'login',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: {\n\t\t\t\trawSignature,\n\t\t\t},\n\t\t});\n\t\tconst permissionRequestId = crypto.randomUUID();\n\t\tconst callbackPromise = this._permissionRequestCallbacks.addCallback(permissionRequestId);\n\t\tthis._communicationController.on('event', this._createTezosBeaconEventHandler(permissionRequestId));\n\t\tif (this.walletApp) {\n\t\t\tWebApp.openLink(\n\t\t\t\tgetConnectionStringUniversalLink(\n\t\t\t\t\tthis.walletApp,\n\t\t\t\t\tloginResponse.payload.connectionString,\n\t\t\t\t\tthis._genericWalletUrl,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis.emit('connectionString', loginResponse.payload.connectionString);\n\t\treturn callbackPromise;\n\t}\n\n\t// Start WalletProvider\n\n\t/**\n\t * Retrieves the public key hash (PKH) associated with the current instance.\n\t *\n\t * @returns {Promise<string>} A promise that resolves to the PKH as a string.\n\t */\n\tasync getPKH(): Promise<string> {\n\t\treturn getAddressFromPublicKey(this._getPublicKey());\n\t}\n\n\t/**\n\t * Retrieves the public key associated with the current instance.\n\t *\n\t * @returns {Promise<string>} A promise that resolves to the public key as a string.\n\t */\n\tasync getPK(): Promise<string> {\n\t\treturn this._getPublicKey();\n\t}\n\n\t/**\n\t * Maps transfer parameters to wallet parameters for a Tezos transaction.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletTransferParams`.\n\t * @returns A promise that resolves to `PartialTezosTransactionOperation`.\n\t *\n\t * The function takes the transfer parameters and formats them into the appropriate\n\t * wallet parameters required for a Tezos transaction. It handles the conversion of\n\t * amounts, fees, gas limits, storage limits, and other necessary fields.\n\t *\n\t * The resulting object includes:\n\t * - `amount`: The formatted transaction amount.\n\t * - `destination`: The destination address.\n\t * - `fee`: The transaction fee, if provided.\n\t * - `gas_limit`: The gas limit for the transaction, if provided.\n\t * - `kind`: The type of operation, which is 'transaction'.\n\t * - `parameters`: Additional parameters for the transaction.\n\t * - `source`: The source address derived from the public key, if available.\n\t * - `storage_limit`: The storage limit for the transaction, if provided.\n\t *\n\t * The function logs the transfer parameters for debugging purposes.\n\t */\n\tasync mapTransferParamsToWalletParams(\n\t\tparams: () => Promise<WalletTransferParams>,\n\t): Promise<PartialTezosTransactionOperation> {\n\t\tconst transferParameters = await params();\n\t\tconsole.log('mapTransferParamsToWalletParams()', transferParameters);\n\t\treturn {\n\t\t\tamount: formatTransactionAmount(transferParameters.amount, transferParameters.mutez),\n\t\t\tdestination: transferParameters.to,\n\t\t\tfee: transferParameters.fee === undefined ? undefined : toIntegerString(transferParameters.fee),\n\t\t\tgas_limit: transferParameters.gasLimit === undefined ? undefined : toIntegerString(transferParameters.gasLimit),\n\t\t\tkind: 'transaction',\n\t\t\tparameters: transferParameters.parameter as PartialTezosTransactionOperation['parameters'],\n\t\t\tsource: this._publicKey === undefined ? undefined : getAddressFromPublicKey(this._publicKey),\n\t\t\tstorage_limit:\n\t\t\t\ttransferParameters.storageLimit === undefined ? undefined : toIntegerString(transferParameters.storageLimit),\n\t\t};\n\t}\n\n\t/**\n\t * Maps the transfer ticket parameters to wallet parameters.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletTransferTicketParams`.\n\t * @returns A promise that resolves to a partial `TezosTransferTicketOperation`.\n\t * @throws An error indicating that the method is not implemented yet.\n\t */\n\tasync mapTransferTicketParamsToWalletParams(\n\t\tparams: () => Promise<WalletTransferTicketParams>,\n\t): Promise<PartialTezosTransferTicketOperation> {\n\t\tconst transferTicketParameters = await params();\n\t\tconsole.log('mapTransferTicketParamsToWalletParams()', transferTicketParameters);\n\t\tthrow new Error('mapTransferTicketParamsToWalletParams not implemented yet');\n\t}\n\n\t/**\n\t * Maps the staking parameters to wallet transaction parameters.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletStakeParams`.\n\t * @returns A promise that resolves to `PartialTezosTransactionOperation` containing the mapped transaction parameters.\n\t *\n\t * The returned object includes:\n\t * - `amount`: The formatted transaction amount.\n\t * - `destination`: The destination address, derived from the public key if not provided.\n\t * - `fee`: The transaction fee, converted to a string if defined.\n\t * - `gas_limit`: The gas limit for the transaction, converted to a string if defined.\n\t * - `kind`: The type of operation, which is 'transaction'.\n\t * - `parameters`: The transaction parameters.\n\t * - `source`: The source address, derived from the public key if available.\n\t * - `storage_limit`: The storage limit for the transaction, converted to a string if defined.\n\t *\n\t * @throws Will throw an error if the mapping is not implemented yet.\n\t */\n\tasync mapStakeParamsToWalletParams(\n\t\tparams: () => Promise<WalletStakeParams>,\n\t): Promise<PartialTezosTransactionOperation> {\n\t\tconst stakeParameters = await params();\n\t\tconsole.log('mapStakeParamsToWalletParams()', stakeParameters);\n\t\t// throw new Error('mapStakeParamsToWalletParams not implemented yet');\n\t\treturn {\n\t\t\tamount: formatTransactionAmount(stakeParameters.amount, stakeParameters.mutez),\n\t\t\tdestination: stakeParameters.to ?? getAddressFromPublicKey(this._getPublicKey()),\n\t\t\tfee: stakeParameters.fee === undefined ? undefined : toIntegerString(stakeParameters.fee),\n\t\t\tgas_limit: stakeParameters.gasLimit === undefined ? undefined : toIntegerString(stakeParameters.gasLimit),\n\t\t\tkind: 'transaction',\n\t\t\tparameters: stakeParameters.parameter as PartialTezosTransactionOperation['parameters'],\n\t\t\tsource: this._publicKey === undefined ? undefined : getAddressFromPublicKey(this._publicKey),\n\t\t\tstorage_limit:\n\t\t\t\tstakeParameters.storageLimit === undefined ? undefined : toIntegerString(stakeParameters.storageLimit),\n\t\t};\n\t}\n\n\t/**\n\t * Maps unstake parameters to wallet parameters.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletUnstakeParams`.\n\t * @returns A promise that resolves to `PartialTezosTransactionOperation`.\n\t *\n\t * The function takes unstake parameters and maps them to the corresponding wallet parameters\n\t * required for a Tezos transaction operation. It formats the transaction amount, sets the\n\t * destination address, and includes optional fee, gas limit, and storage limit parameters.\n\t * The source address is derived from the public key if available.\n\t */\n\tasync mapUnstakeParamsToWalletParams(\n\t\tparams: () => Promise<WalletUnstakeParams>,\n\t): Promise<PartialTezosTransactionOperation> {\n\t\tconst unstakeParameters = await params();\n\t\tconsole.log('mapUnstakeParamsToWalletParams()', unstakeParameters);\n\t\t// throw new Error('mapUnstakeParamsToWalletParams not implemented yet');\n\t\treturn {\n\t\t\tamount: formatTransactionAmount(unstakeParameters.amount, unstakeParameters.mutez),\n\t\t\tdestination: unstakeParameters.to ?? getAddressFromPublicKey(this._getPublicKey()),\n\t\t\tfee: unstakeParameters.fee === undefined ? undefined : toIntegerString(unstakeParameters.fee),\n\t\t\tgas_limit: unstakeParameters.gasLimit === undefined ? undefined : toIntegerString(unstakeParameters.gasLimit),\n\t\t\tkind: 'transaction',\n\t\t\tparameters: unstakeParameters.parameter as PartialTezosTransactionOperation['parameters'],\n\t\t\tsource: this._publicKey === undefined ? undefined : getAddressFromPublicKey(this._publicKey),\n\t\t\tstorage_limit:\n\t\t\t\tunstakeParameters.storageLimit === undefined ? undefined : toIntegerString(unstakeParameters.storageLimit),\n\t\t};\n\t}\n\n\t/**\n\t * Maps the finalize unstake parameters to wallet parameters.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletFinalizeUnstakeParams`.\n\t * @returns A promise that resolves to `PartialTezosTransactionOperation`.\n\t * @throws Will throw an error if the amount is undefined.\n\t */\n\tasync mapFinalizeUnstakeParamsToWalletParams(\n\t\tparams: () => Promise<WalletFinalizeUnstakeParams>,\n\t): Promise<PartialTezosTransactionOperation> {\n\t\tconst finalizeUnstakeParameters = await params();\n\t\tconsole.log('mapFinalizeUnstakeParamsToWalletParams()', finalizeUnstakeParameters);\n\t\t// throw new Error('mapFinalizeUnstakeParamsToWalletParams not implemented yet');\n\t\tif (finalizeUnstakeParameters.amount === undefined) {\n\t\t\tthrow new Error('Amount is required');\n\t\t}\n\t\treturn {\n\t\t\tamount: formatTransactionAmount(finalizeUnstakeParameters.amount, finalizeUnstakeParameters.mutez),\n\t\t\tdestination: finalizeUnstakeParameters.to ?? getAddressFromPublicKey(this._getPublicKey()),\n\t\t\tfee: finalizeUnstakeParameters.fee === undefined ? undefined : toIntegerString(finalizeUnstakeParameters.fee),\n\t\t\tgas_limit:\n\t\t\t\tfinalizeUnstakeParameters.gasLimit === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: toIntegerString(finalizeUnstakeParameters.gasLimit),\n\t\t\tkind: 'transaction',\n\t\t\tparameters: finalizeUnstakeParameters.parameter as PartialTezosTransactionOperation['parameters'],\n\t\t\tsource: this._publicKey === undefined ? undefined : getAddressFromPublicKey(this._publicKey),\n\t\t\tstorage_limit:\n\t\t\t\tfinalizeUnstakeParameters.storageLimit === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: toIntegerString(finalizeUnstakeParameters.storageLimit),\n\t\t};\n\t}\n\n\tasync mapOriginateParamsToWalletParams(\n\t\tparams: () => Promise<WalletOriginateParams>,\n\t): Promise<PartialTezosOriginationOperation> {\n\t\tconst originateParameters = await params();\n\t\tconsole.log('mapOriginateParamsToWalletParams()', originateParameters);\n\t\tthrow new Error('mapOriginateParamsToWalletParams not implemented yet');\n\t\t// const { code, init, storage, storageLimit, balance, delegate, fee, gasLimit, mutez } = originateParameters;\n\t\t// const script = {\n\t\t// \tcode,\n\t\t// \tstorage: contractStorage,\n\t\t// };\n\t\t// return {\n\t\t// \tkind: 'origination',\n\t\t// };\n\t}\n\n\t/**\n\t * Maps delegate parameters to wallet parameters for a Tezos delegation operation.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletDelegateParams`.\n\t * @returns A promise that resolves to a partial Tezos delegation operation object.\n\t *\n\t * The returned object contains the following properties:\n\t * - `delegate`: The delegate address.\n\t * - `fee`: The fee for the operation, converted to a string if defined.\n\t * - `gas_limit`: The gas limit for the operation, converted to a string if defined.\n\t * - `kind`: The kind of operation, which is always 'delegation'.\n\t * - `storage_limit`: The storage limit for the operation, converted to a string if defined.\n\t */\n\tasync mapDelegateParamsToWalletParams(\n\t\tparams: () => Promise<WalletDelegateParams>,\n\t): Promise<PartialTezosDelegationOperation> {\n\t\tconst delegateParameters = await params();\n\t\tconsole.log('mapDelegateParamsToWalletParams()', delegateParameters);\n\t\t// throw new Error('mapDelegateParamsToWalletParams not implemented yet');\n\t\treturn {\n\t\t\tdelegate: delegateParameters.delegate,\n\t\t\tfee: delegateParameters.fee === undefined ? undefined : toIntegerString(delegateParameters.fee),\n\t\t\tgas_limit: delegateParameters.gasLimit === undefined ? undefined : toIntegerString(delegateParameters.gasLimit),\n\t\t\tkind: 'delegation',\n\t\t\tstorage_limit:\n\t\t\t\tdelegateParameters.storageLimit === undefined ? undefined : toIntegerString(delegateParameters.storageLimit),\n\t\t};\n\t}\n\n\t/**\n\t * Maps the parameters for increasing paid storage in a wallet to a partial Tezos increase paid storage operation.\n\t *\n\t * @param params - A function that returns a promise resolving to `WalletIncreasePaidStorageParams`.\n\t * @returns A promise that resolves to a `PartialTezosIncreasePaidStorageOperation` object.\n\t *\n\t * The returned object contains:\n\t * - `amount`: The formatted transaction amount.\n\t * - `destination`: The destination address for the storage increase.\n\t * - `fee`: The fee for the operation, if defined.\n\t * - `gas_limit`: The gas limit for the operation, if defined.\n\t * - `kind`: The kind of operation, which is 'increase_paid_storage'.\n\t * - `storage_limit`: The storage limit for the operation, if defined.\n\t */\n\tasync mapIncreasePaidStorageWalletParams(\n\t\tparams: () => Promise<WalletIncreasePaidStorageParams>,\n\t): Promise<PartialTezosIncreasePaidStorageOperation> {\n\t\tconst increasePaidStorageParameters = await params();\n\t\tconsole.log('mapIncreasePaidStorageWalletParams()', increasePaidStorageParameters);\n\t\t// throw new Error('mapIncreasePaidStorageWalletParams not implemented yet');\n\t\treturn {\n\t\t\tamount: formatTransactionAmount(increasePaidStorageParameters.amount, true),\n\t\t\tdestination: increasePaidStorageParameters.destination,\n\t\t\tfee:\n\t\t\t\tincreasePaidStorageParameters.fee === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: toIntegerString(increasePaidStorageParameters.fee),\n\t\t\tgas_limit:\n\t\t\t\tincreasePaidStorageParameters.gasLimit === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: toIntegerString(increasePaidStorageParameters.gasLimit),\n\t\t\tkind: 'increase_paid_storage',\n\t\t\tstorage_limit:\n\t\t\t\tincreasePaidStorageParameters.storageLimit === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: toIntegerString(increasePaidStorageParameters.storageLimit),\n\t\t};\n\t}\n\n\t/**\n\t * Sends an array of Tezos operations to be processed.\n\t *\n\t * @param {Array<PartialTezosOperation>} params - An array of partial Tezos operations to be sent.\n\t * @returns {Promise<string>} A promise that resolves to the transaction hash of the sent operations.\n\t * @throws Will throw an error if the operation request fails.\n\t */\n\tasync sendOperations(params: Array<PartialTezosOperation>): Promise<string> {\n\t\tconsole.log('sendOperations()', params);\n\t\t// throw new Error('sendOperations not implemented yet');\n\t\tconst response = await this._sendTezosMessage({\n\t\t\ttype: 'operation_request',\n\t\t\tnetwork: this.network,\n\t\t\toperationDetails: params,\n\t\t\tsourceAddress: getAddressFromPublicKey(this._getPublicKey()),\n\t\t});\n\t\treturn response.transactionHash;\n\t}\n\n\t/**\n\t * Signs the given bytes with an optional watermark.\n\t *\n\t * @param bytes - The hexadecimal string representing the bytes to be signed.\n\t * @param watermark - An optional Uint8Array representing the watermark.\n\t *                    The watermark must be a single byte with the value 3.\n\t * @returns A promise that resolves to the signature string.\n\t * @throws Will throw an error if the watermark is not supported.\n\t */\n\tasync sign(bytes: string, watermark?: Uint8Array): Promise<string> {\n\t\tconsole.log('sign()', bytes, watermark);\n\t\t// throw new Error('sign not implemented yet');\n\n\t\tif (watermark?.length !== 1 || watermark[0] !== 3) {\n\t\t\tthrow new Error('Watermark is not supported');\n\t\t}\n\t\tconst bytesBuffer = Buffer.concat([Buffer.from(watermark), Buffer.from(bytes, 'hex')]);\n\t\tconst watermarkedBytes = bytesBuffer.toString('hex');\n\t\tconst response = await this._sendTezosMessage({\n\t\t\ttype: 'sign_payload_request',\n\t\t\tpayload: watermarkedBytes,\n\t\t\tsourceAddress: getAddressFromPublicKey(this._getPublicKey()),\n\t\t\tsigningType: 'operation',\n\t\t});\n\t\treturn response.signature;\n\t}\n\n\t// End WalletProvider\n\n\t/**\n\t * Requests the signing of a payload with the specified signing type.\n\t *\n\t * @param input - The input parameters for the signing request.\n\t * @param input.signingType - The type of signing to be performed. Can be 'operation' or 'micheline'.\n\t * @param input.payload - The payload to be signed. Must start with '03' if signing type is 'operation', or '05' if signing type is 'micheline'.\n\t * @param input.sourceAddress - (Optional) The source address for the signing request. If not provided, it will be derived from the public key.\n\t *\n\t * @returns A promise that resolves to a `SignPayloadResponse` containing the signed payload.\n\t *\n\t * @throws An error if the payload does not start with the required prefix for the specified signing type.\n\t */\n\tasync requestSignPayload(input: RequestSignPayloadInput): Promise<SignPayloadResponse> {\n\t\tconst { signingType, payload, sourceAddress } = input;\n\t\tswitch (signingType) {\n\t\t\tcase 'operation': {\n\t\t\t\tif (!payload.startsWith('03')) {\n\t\t\t\t\tthrow new Error('When using signing type \"operation\", the payload must start with prefix \"03\"');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'micheline': {\n\t\t\t\tif (!payload.startsWith('05')) {\n\t\t\t\t\tthrow new Error('When using signing type \"micheline\", the payload must start with prefix \"05\"');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst response = await this._sendTezosMessage({\n\t\t\ttype: 'sign_payload_request',\n\t\t\tpayload,\n\t\t\tsourceAddress: sourceAddress ?? getAddressFromPublicKey(this._getPublicKey()),\n\t\t\tsigningType: signingType ?? 'raw',\n\t\t});\n\t\treturn response;\n\t}\n\n\t/**\n\t * Checks if the provider is currently connected.\n\t *\n\t * @returns {boolean} `true` if the provider is connected, otherwise `false`.\n\t */\n\tconnected(): boolean {\n\t\treturn this._communicationController.connected();\n\t}\n\n\t/**\n\t * Disconnects the Tezos Beacon Provider.\n\t *\n\t * This method sends a 'disconnect' message to the Tezos network and then performs\n\t * necessary cleanup operations. It emits a 'disconnect' event and disconnects the\n\t * communication controller.\n\t *\n\t * @returns {Promise<void>} A promise that resolves when the disconnection process is complete.\n\t */\n\tasync disconnect(): Promise<void> {\n\t\ttry {\n\t\t\tawait this._sendTezosMessage({ type: 'disconnect' });\n\t\t} finally {\n\t\t\tthis.emit('disconnect', undefined);\n\t\t\tthis._communicationController.disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Serializes the TConnectTezosBeaconProvider instance into a string.\n\t *\n\t * The serialized string includes the following properties:\n\t * - `appName`: The name of the application.\n\t * - `appUrl`: The URL of the application.\n\t * - `network`: The network configuration.\n\t * - `bridgeUrl`: The URL of the bridge.\n\t * - `walletApp`: The wallet application information.\n\t * - `_secretSeed`: The secret seed used for encryption.\n\t * - `_apiKey`: The API key for authentication.\n\t * - `_genericWalletUrl`: The URL of the generic wallet.\n\t * - `_communicationController`: The serialized communication controller.\n\t * - `_sessionId`: The session ID.\n\t * - `_otherPublicKey`: The public key of the other party.\n\t * - `_publicKey`: The public key of the current instance.\n\t *\n\t * @returns {string} The serialized string representation of the instance.\n\t */\n\tserialize(): string {\n\t\treturn stringify({\n\t\t\tappName: this.appName,\n\t\t\tappUrl: this.appUrl,\n\t\t\tappIcon: this.appIcon,\n\t\t\tnetwork: this.network,\n\t\t\tbridgeUrl: this.bridgeUrl,\n\t\t\twalletApp: this.walletApp,\n\t\t\t_secretSeed: this._secretSeed,\n\t\t\t_apiKey: this._apiKey,\n\t\t\t_genericWalletUrl: this._genericWalletUrl,\n\t\t\t_communicationController: this._communicationController.serialize(),\n\t\t\t_sessionId: this._getSessionId(),\n\t\t\t_otherPublicKey: this._getOtherPublicKey(),\n\t\t\t_publicKey: this._getPublicKey(),\n\t\t} satisfies SerializedTConnectTezosBeaconProvider);\n\t}\n\n\t/**\n\t * Deserializes a string into a `TConnectTezosBeaconProvider` instance.\n\t *\n\t * @param serialized - The serialized string representation of the `TConnectTezosBeaconProvider`.\n\t * @returns A promise that resolves to a `TConnectTezosBeaconProvider` instance.\n\t */\n\tstatic async deserialize(serialized: string): Promise<TConnectTezosBeaconProvider> {\n\t\tconst data = parse(serialized) as SerializedTConnectTezosBeaconProvider;\n\t\tconst provider = new TConnectTezosBeaconProvider({\n\t\t\tappName: data.appName,\n\t\t\tappUrl: data.appUrl,\n\t\t\tappIcon: data.appIcon,\n\t\t\tsecretSeed: data._secretSeed,\n\t\t\tapiKey: data._apiKey,\n\t\t\tnetwork: data.network,\n\t\t\tbridgeUrl: data.bridgeUrl,\n\t\t\twalletApp: data.walletApp,\n\t\t\t// genericWalletUrl: data._genericWalletUrl,\n\t\t});\n\t\tprovider._communicationController = CommunicationController.deserialize(data._communicationController);\n\t\tprovider._sessionId = data._sessionId;\n\t\tprovider._otherPublicKey = data._otherPublicKey;\n\t\tprovider._publicKey = data._publicKey;\n\t\tawait provider._reconnect();\n\t\treturn provider;\n\t}\n\n\t/**\n\t * Reconnects the Tezos Beacon provider by setting up the communication controller\n\t * and sending a reconnect request.\n\t *\n\t * @private\n\t * @returns {Promise<void>} A promise that resolves when the reconnection process is complete.\n\t */\n\tprivate async _reconnect(): Promise<void> {\n\t\tthis._communicationController.on('event', this._createTezosBeaconEventHandler(undefined));\n\t\tawait this._communicationController.connect();\n\t\tawait this._sendTezosBeaconRequest({ type: 'reconnect', sessionId: this._getSessionId() });\n\t}\n\n\t/**\n\t * Creates an event handler for Tezos Beacon events.\n\t *\n\t * @param permissionRequestId - The ID of the permission request, if available.\n\t * @returns A function that handles Tezos Beacon events.\n\t *\n\t * The returned function processes the following event types:\n\t * - 'message': Handles incoming messages, decrypts and processes them based on their type.\n\t * - 'disconnect': Emits a 'disconnect' event.\n\t *\n\t * The 'message' event type can handle the following message types:\n\t * - PermissionRequest: Sends a permission request message.\n\t * - PermissionResponse: Resolves the permission request callback with the response.\n\t * - OperationResponse: Resolves the operation request callback with the response.\n\t * - SignPayloadResponse: Resolves the sign payload request callback with the response.\n\t * - DisconnectMessage: Disconnects the provider.\n\t * - ErrorResponse: Rejects the appropriate callback with an error.\n\t *\n\t * If an error occurs during event processing, it is logged to the console.\n\t */\n\tprivate _createTezosBeaconEventHandler(\n\t\tpermissionRequestId: string | undefined,\n\t): (event: TezosBeaconEvent) => Promise<void> {\n\t\treturn async (event: TezosBeaconEvent) => {\n\t\t\ttry {\n\t\t\t\tevent = validateTezosBeaconEvent(event);\n\t\t\t\tswitch (event.type) {\n\t\t\t\t\tcase 'message': {\n\t\t\t\t\t\tconst bodySplits = event.payload.message.split(':');\n\t\t\t\t\t\tif (bodySplits.length > 1) {\n\t\t\t\t\t\t\tif (permissionRequestId) {\n\t\t\t\t\t\t\t\tconst encryptedJson = bodySplits.at(-1);\n\t\t\t\t\t\t\t\tif (!encryptedJson) {\n\t\t\t\t\t\t\t\t\tthrow new Error('Empty text message');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst pairingResponse = JSON.parse(\n\t\t\t\t\t\t\t\t\topenCryptobox(\n\t\t\t\t\t\t\t\t\t\tBuffer.from(encryptedJson, 'hex'),\n\t\t\t\t\t\t\t\t\t\tthis._communicationKeyPair.publicKey,\n\t\t\t\t\t\t\t\t\t\tthis._communicationKeyPair.secretKey,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (isPairingResponse(pairingResponse)) {\n\t\t\t\t\t\t\t\t\tthis._otherPublicKey = Buffer.from(pairingResponse.publicKey, 'hex');\n\t\t\t\t\t\t\t\t\tconst message: PermissionRequest = {\n\t\t\t\t\t\t\t\t\t\tid: permissionRequestId,\n\t\t\t\t\t\t\t\t\t\ttype: 'permission_request',\n\t\t\t\t\t\t\t\t\t\tversion: '2',\n\t\t\t\t\t\t\t\t\t\tsenderId: getSenderId(toHex(this._communicationKeyPair.publicKey)),\n\t\t\t\t\t\t\t\t\t\tappMetadata: {\n\t\t\t\t\t\t\t\t\t\t\tsenderId: getSenderId(toHex(this._communicationKeyPair.publicKey)),\n\t\t\t\t\t\t\t\t\t\t\tname: this.appName,\n\t\t\t\t\t\t\t\t\t\t\ticon: this.appIcon,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnetwork: this.network,\n\t\t\t\t\t\t\t\t\t\tscopes: ['operation_request', 'sign'],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tawait this._sendTezosMessage(message);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsole.log(\"pairingResponse isn't valid\", pairingResponse);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (this._otherPublicKey) {\n\t\t\t\t\t\t\tconst sharedKey = createCryptoBoxServer(\n\t\t\t\t\t\t\t\tthis._getOtherPublicKey().toString('hex'),\n\t\t\t\t\t\t\t\tthis._communicationKeyPair,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst decryptedMessage = decryptCryptoboxPayload(\n\t\t\t\t\t\t\t\tBuffer.from(event.payload.message, 'hex'),\n\t\t\t\t\t\t\t\tsharedKey.receive,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst message = JSON.parse(Buffer.from(bs58check.decode(decryptedMessage)).toString('utf8'));\n\t\t\t\t\t\t\tif (isPermissionResponse(message)) {\n\t\t\t\t\t\t\t\tconsole.log('PermissionResponse', message);\n\t\t\t\t\t\t\t\tthis._publicKey = message.publicKey;\n\t\t\t\t\t\t\t\tthis._permissionRequestCallbacks.resolveCallback(message.id, undefined);\n\t\t\t\t\t\t\t} else if (isOperationResponse(message)) {\n\t\t\t\t\t\t\t\tconsole.log('OperationResponse', message);\n\t\t\t\t\t\t\t\tthis._operationRequestCallbacks.resolveCallback(message.id, message);\n\t\t\t\t\t\t\t} else if (isSignPayloadResponse(message)) {\n\t\t\t\t\t\t\t\tconsole.log('SignPayloadResponse', message);\n\t\t\t\t\t\t\t\tthis._signPayloadRequestCallbacks.resolveCallback(message.id, message);\n\t\t\t\t\t\t\t} else if (isDisconnectMessage(message)) {\n\t\t\t\t\t\t\t\tconsole.log('DisconnectMessage', message);\n\t\t\t\t\t\t\t\tthis.disconnect();\n\t\t\t\t\t\t\t} else if (isErrorResponse(message)) {\n\t\t\t\t\t\t\t\tconsole.error('ErrorResponse', message);\n\t\t\t\t\t\t\t\tthis._permissionRequestCallbacks.rejectCallback(message.id, new Error(message.errorType));\n\t\t\t\t\t\t\t\tthis._operationRequestCallbacks.rejectCallback(message.id, new Error(message.errorType));\n\t\t\t\t\t\t\t\tthis._signPayloadRequestCallbacks.rejectCallback(message.id, new Error(message.errorType));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.log('Unknown message', message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'disconnect': {\n\t\t\t\t\t\tthis.emit('disconnect', undefined);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Sends a Tezos message to the wallet application.\n\t *\n\t * @param partialMessage - The message to be sent. It can be of type `PermissionRequestInput`, `OperationRequestInput`, `SignPayloadRequestInput`, or `DisconnectMessageInput`.\n\t * @returns A promise that resolves to `void`, `OperationResponse`, or `SignPayloadResponse` depending on the type of the message.\n\t *\n\t * The function constructs a complete message by adding necessary fields such as `version` and `senderId` to the `partialMessage`.\n\t * It then encrypts the message using a shared key derived from the communication key pair.\n\t *\n\t * If the wallet application is available and the message type is either `operation_request` or `sign_payload_request`,\n\t * it opens a universal link to the wallet application.\n\t *\n\t * Depending on the message type, it sends the encrypted message to the Tezos beacon and handles the response accordingly:\n\t * - For `operation_request`, it adds a callback and waits for the response.\n\t * - For `sign_payload_request`, it adds a callback and waits for the response.\n\t * - For `disconnect`, it sends a disconnect request.\n\t * - For other message types, it sends a generic message request.\n\t */\n\tprivate async _sendTezosMessage(partialMessage: PermissionRequestInput): Promise<void>;\n\tprivate async _sendTezosMessage(partialMessage: OperationRequestInput): Promise<OperationResponse>;\n\tprivate async _sendTezosMessage(partialMessage: SignPayloadRequestInput): Promise<SignPayloadResponse>;\n\t// eslint-disable-next-line @typescript-eslint/unified-signatures\n\tprivate async _sendTezosMessage(partialMessage: DisconnectMessageInput): Promise<void>;\n\tprivate async _sendTezosMessage(\n\t\tpartialMessage: PermissionRequestInput | OperationRequestInput | SignPayloadRequestInput | DisconnectMessageInput,\n\t\t// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n\t): Promise<void | OperationResponse | SignPayloadResponse> {\n\t\tconst message =\n\t\t\tpartialMessage.type === 'permission_request'\n\t\t\t\t? {\n\t\t\t\t\t\t...partialMessage,\n\t\t\t\t\t\tversion: '2',\n\t\t\t\t\t\tsenderId: getSenderId(toHex(this._communicationKeyPair.publicKey)),\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t...partialMessage,\n\t\t\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\t\t\tversion: '2',\n\t\t\t\t\t\tsenderId: getSenderId(toHex(this._communicationKeyPair.publicKey)),\n\t\t\t\t\t};\n\t\tconst sharedKey = createCryptoBoxClient(this._getOtherPublicKey().toString('hex'), this._communicationKeyPair);\n\t\tconst encryptedMessage = encryptCryptoboxPayload(\n\t\t\tbs58check.encode(Buffer.from(JSON.stringify(message), 'utf8')),\n\t\t\tsharedKey.send,\n\t\t);\n\t\tif (this.walletApp) {\n\t\t\tswitch (message.type) {\n\t\t\t\tcase 'operation_request':\n\t\t\t\tcase 'sign_payload_request': {\n\t\t\t\t\tconst universalLink = getUniversalLink(this.walletApp);\n\t\t\t\t\tif (universalLink) {\n\t\t\t\t\t\tWebApp.openLink(universalLink);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswitch (message.type) {\n\t\t\tcase 'operation_request': {\n\t\t\t\tconst callbackPromise = this._operationRequestCallbacks.addCallback(message.id);\n\t\t\t\tawait this._sendTezosBeaconRequest({\n\t\t\t\t\ttype: 'message',\n\t\t\t\t\tsessionId: this._getSessionId(),\n\t\t\t\t\tpayload: { message: encryptedMessage },\n\t\t\t\t});\n\t\t\t\treturn callbackPromise;\n\t\t\t}\n\t\t\tcase 'sign_payload_request': {\n\t\t\t\tconst callbackPromise = this._signPayloadRequestCallbacks.addCallback(message.id);\n\t\t\t\tawait this._sendTezosBeaconRequest({\n\t\t\t\t\ttype: 'message',\n\t\t\t\t\tsessionId: this._getSessionId(),\n\t\t\t\t\tpayload: { message: encryptedMessage },\n\t\t\t\t});\n\t\t\t\treturn callbackPromise;\n\t\t\t}\n\t\t\tcase 'disconnect': {\n\t\t\t\tawait this._sendTezosBeaconRequest({\n\t\t\t\t\ttype: 'disconnect',\n\t\t\t\t\tsessionId: this._getSessionId(),\n\t\t\t\t\tpayload: { message: encryptedMessage },\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tawait this._sendTezosBeaconRequest({\n\t\t\ttype: 'message',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: { message: encryptedMessage },\n\t\t});\n\t}\n\n\t/**\n\t * Sends a Tezos Beacon request and handles the response.\n\t *\n\t * @param tezosRequest - The Tezos Beacon request to be sent.\n\t * @returns A promise that resolves to a Tezos Beacon response.\n\t * @throws Will throw an error if there is no connection, if the response contains an error, or if the response type does not match the request type.\n\t */\n\tprivate async _sendTezosBeaconRequest(tezosRequest: TezosBeaconInitRequest): Promise<TezosBeaconInitResponse>;\n\tprivate async _sendTezosBeaconRequest(tezosRequest: TezosBeaconLoginRequest): Promise<TezosBeaconLoginResponse>;\n\tprivate async _sendTezosBeaconRequest(tezosRequest: TezosBeaconMessageRequest): Promise<TezosBeaconMessageResponse>;\n\tprivate async _sendTezosBeaconRequest(\n\t\ttezosRequest: TezosBeaconReconnectRequest,\n\t): Promise<TezosBeaconReconnectResponse>;\n\tprivate async _sendTezosBeaconRequest(\n\t\ttezosRequest: TezosBeaconDisconnectRequest,\n\t): Promise<TezosBeaconDisconnectResponse>;\n\tprivate async _sendTezosBeaconRequest(tezosRequest: TezosBeaconRequest): Promise<TezosBeaconResponse> {\n\t\tif (!this._communicationController.connected()) {\n\t\t\tthrow new Error(\"Can't send request without connection\");\n\t\t}\n\t\tconst tezosResponse = await this._communicationController.send(tezosRequest);\n\t\tconst validatedTezosResponse = validateTezosBeaconResponse(tezosResponse);\n\t\tif (validatedTezosResponse.type === 'error') {\n\t\t\tif (validatedTezosResponse.payload.type === 'generic') {\n\t\t\t\tlet errorMessage = `Error Code: ${validatedTezosResponse.payload.key}`;\n\t\t\t\tif (validatedTezosResponse.payload.message) {\n\t\t\t\t\terrorMessage += `: ${validatedTezosResponse.payload.message}`;\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t} else {\n\t\t\t\tthrow new TezosBeaconError(\n\t\t\t\t\tvalidatedTezosResponse.payload.type,\n\t\t\t\t\tgetErrorMessage(validatedTezosResponse.payload.type, validatedTezosResponse.payload.message),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (tezosRequest.type !== validatedTezosResponse.type) {\n\t\t\tthrow new Error('Response type is different from request type');\n\t\t}\n\t\treturn tezosResponse;\n\t}\n\n\t/**\n\t * Retrieves the public key.\n\t *\n\t * @returns {string} The public key.\n\t * @throws {Error} If the public key is not set.\n\t * @private\n\t */\n\tprivate _getPublicKey(): string {\n\t\tif (!this._publicKey) {\n\t\t\tthrow new Error('Public key is not set');\n\t\t}\n\t\treturn this._publicKey;\n\t}\n\n\t/**\n\t * Retrieves the current session ID.\n\t *\n\t * @returns {string} The session ID.\n\t * @throws {Error} If the session ID is not set.\n\t * @private\n\t */\n\tprivate _getSessionId(): string {\n\t\tif (!this._sessionId) {\n\t\t\tthrow new Error('Session ID is not set');\n\t\t}\n\t\treturn this._sessionId;\n\t}\n\n\t/**\n\t * Retrieves the public key of the other party (e.g., wallet).\n\t *\n\t * @returns {Buffer} The public key of the other party.\n\t * @throws {Error} If the wallet public key is not set.\n\t * @private\n\t */\n\tprivate _getOtherPublicKey(): Buffer {\n\t\tif (!this._otherPublicKey) {\n\t\t\tthrow new Error('Wallet public key is not set');\n\t\t}\n\t\treturn this._otherPublicKey;\n\t}\n}\n"]}