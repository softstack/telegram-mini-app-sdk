{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/utils/base.ts"],"names":[],"mappings":";;;AAMO,MAAM,QAAQ,GAAG,CAAC,KAA+B,EAAsB,EAAE;IAC/E,IAAI,CAAC;QACJ,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAAC,MAAM,CAAC;QACR,OAAO,SAAS,CAAC;IAClB,CAAC;AACF,CAAC,CAAC;AANW,QAAA,QAAQ,YAMnB;AAQK,MAAM,eAAe,GAAG,CAAC,KAA+B,EAAU,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAAxF,QAAA,eAAe,mBAAyE;AAU9F,MAAM,uBAAuB,GAAG,CAAC,MAAc,EAAE,KAAK,GAAG,KAAK,EAAU,EAAE;IAChF,IAAI,KAAK,EAAE,CAAC;QACX,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IACD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;AAChD,CAAC,CAAC;AALW,QAAA,uBAAuB,2BAKlC","sourcesContent":["/**\n * Converts a given value to a bigint.\n *\n * @param value - The value to convert. It can be of type bigint, number, or string.\n * @returns The converted bigint value, or undefined if the conversion fails.\n */\nexport const toBigint = (value: bigint | number | string): bigint | undefined => {\n\ttry {\n\t\treturn BigInt(value);\n\t} catch {\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Converts a given value to its integer string representation.\n *\n * @param value - The value to be converted, which can be of type bigint, number, or string.\n * @returns The integer string representation of the given value.\n */\nexport const toIntegerString = (value: bigint | number | string): string => BigInt(value).toString();\n\n/**\n * Formats a transaction amount.\n *\n * @param amount - The amount to format.\n * @param mutez - A boolean indicating whether the amount is in mutez (smallest unit of Tezos).\n *                If true, the amount is returned as is. If false, the amount is converted to mutez.\n * @returns The formatted transaction amount as a string.\n */\nexport const formatTransactionAmount = (amount: number, mutez = false): string => {\n\tif (mutez) {\n\t\treturn BigInt(amount).toString();\n\t}\n\treturn (BigInt(amount) * 10n ** 6n).toString();\n};\n"]}