{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BLAKE2b, hash } from '@stablelib/blake2b';\nimport { convertPublicKeyToX25519, convertSecretKeyToX25519, KeyPair } from '@stablelib/ed25519';\nimport { openBox, openSecretBox, secretBox } from '@stablelib/nacl';\nimport { encode } from '@stablelib/utf8';\nimport { clientSessionKeys, serverSessionKeys, SessionKeys } from '@stablelib/x25519-session';\nimport { secretbox_NONCEBYTES } from '@tconnect.io/tezos-beacon-api-types';\nimport bs58check from 'bs58check';\nimport { TezosBeaconWalletApp } from '../types';\n\nexport const isHex = (value: string): boolean => /^[\\da-f]+$/i.test(value);\n\nexport const toHex = (value: Uint8Array | string): string => Buffer.from(value).toString('hex');\n\nexport const getHexHash = (key: string | Buffer | Uint8Array): string => {\n\tif (typeof key === 'string') {\n\t\treturn toHex(hash(encode(key), 32));\n\t}\n\treturn toHex(hash(key, 32));\n};\n\nexport const getAddressFromPublicKey = (publicKey: string): string => {\n\tconst prefixes = {\n\t\t// tz1...\n\t\tedpk: {\n\t\t\tlength: 54,\n\t\t\tprefix: Buffer.from(new Uint8Array([6, 161, 159])),\n\t\t},\n\t\t// tz2...\n\t\tsppk: {\n\t\t\tlength: 55,\n\t\t\tprefix: Buffer.from(new Uint8Array([6, 161, 161])),\n\t\t},\n\t\t// tz3...\n\t\tp2pk: {\n\t\t\tlength: 55,\n\t\t\tprefix: Buffer.from(new Uint8Array([6, 161, 164])),\n\t\t},\n\t};\n\tlet prefix: Buffer | undefined;\n\tlet plainPublicKey: string | undefined;\n\tif (publicKey.length === 64) {\n\t\tprefix = prefixes.edpk.prefix;\n\t\tplainPublicKey = publicKey;\n\t} else {\n\t\tconst entries = Object.entries(prefixes);\n\t\tfor (const [key, value] of entries) {\n\t\t\tif (publicKey.startsWith(key) && publicKey.length === value.length) {\n\t\t\t\tprefix = value.prefix;\n\t\t\t\tconst decoded = bs58check.decode(publicKey);\n\t\t\t\tplainPublicKey = Buffer.from(decoded.slice(key.length)).toString('hex');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!prefix || !plainPublicKey) {\n\t\tthrow new Error(`invalid publicKey: ${publicKey}`);\n\t}\n\tconst payload: Uint8Array = hash(Buffer.from(plainPublicKey, 'hex'), 20);\n\treturn bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]));\n};\n\nexport const openCryptobox = (\n\tencryptedPayload: string | Buffer,\n\tpublicKey: Uint8Array,\n\tprivateKey: Uint8Array,\n): string => {\n\tconst kxSelfPrivateKey = convertSecretKeyToX25519(Buffer.from(privateKey)); // Secret bytes to scalar bytes\n\tconst kxSelfPublicKey = convertPublicKeyToX25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n\tconst bytesPayload = typeof encryptedPayload === 'string' ? encode(encryptedPayload) : encryptedPayload;\n\tconst epk = bytesPayload.slice(0, 32);\n\tconst ciphertext = bytesPayload.slice(32);\n\tconst state = new BLAKE2b(24);\n\tconst nonce = state.update(epk, 32).update(kxSelfPublicKey, 32).digest();\n\tconst decryptedMessage2 = openBox(epk, kxSelfPrivateKey, nonce, ciphertext);\n\tif (!decryptedMessage2) {\n\t\tthrow new Error('Decryption failed');\n\t}\n\treturn Buffer.from(decryptedMessage2).toString();\n};\n\nexport const createCryptoBoxServer = (otherPublicKey: string, selfKeypair: KeyPair): SessionKeys =>\n\tserverSessionKeys(\n\t\t{\n\t\t\tpublicKey: convertPublicKeyToX25519(selfKeypair.publicKey),\n\t\t\tsecretKey: convertSecretKeyToX25519(selfKeypair.secretKey),\n\t\t},\n\t\tconvertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')),\n\t);\n\nexport const createCryptoBoxClient = (otherPublicKey: string, selfKeypair: KeyPair): SessionKeys =>\n\tclientSessionKeys(\n\t\t{\n\t\t\tpublicKey: convertPublicKeyToX25519(selfKeypair.publicKey),\n\t\t\tsecretKey: convertSecretKeyToX25519(selfKeypair.secretKey),\n\t\t},\n\t\tconvertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')),\n\t);\n\nexport const getSenderId = (publicKey: string): string => {\n\tif (!isHex(publicKey)) {\n\t\tconsole.error('PublicKey needs to be in hex format!');\n\t}\n\tconst buffer = Buffer.from(hash(Buffer.from(publicKey, 'hex'), 5));\n\treturn bs58check.encode(buffer);\n};\n\nexport const encryptCryptoboxPayload = (message: string, sharedKey: Uint8Array): string => {\n\tconst nonce = Buffer.from(crypto.getRandomValues(new Uint8Array(secretbox_NONCEBYTES)));\n\tconst combinedPayload = Buffer.concat([\n\t\tnonce,\n\t\tBuffer.from(secretBox(sharedKey, nonce, Buffer.from(message, 'utf8'))),\n\t]);\n\treturn toHex(combinedPayload);\n};\n\nexport const decryptCryptoboxPayload = (payload: Uint8Array, sharedKey: Uint8Array): string => {\n\tconst nonce = payload.slice(0, secretbox_NONCEBYTES);\n\tconst ciphertext = payload.slice(secretbox_NONCEBYTES);\n\tconst openBox = openSecretBox(sharedKey, nonce, ciphertext);\n\tif (!openBox) {\n\t\tthrow new Error('Decryption failed');\n\t}\n\treturn Buffer.from(openBox).toString('utf8');\n};\n\n/**\n * Returns the universal link for a given Tezos wallet application.\n *\n * @param walletApp - The Tezos wallet application for which to get the universal link.\n * @returns The universal link as a string if the wallet application is recognized, otherwise undefined.\n */\nexport const getUniversalLink = (walletApp: TezosBeaconWalletApp): string | undefined => {\n\tswitch (walletApp) {\n\t\tcase 'altme': {\n\t\t\treturn 'https://app.altme.io/app/download';\n\t\t}\n\t\tcase 'kukai': {\n\t\t\treturn 'https://connect.kukai.app';\n\t\t}\n\t\tcase 'temple': {\n\t\t\treturn 'https://app.templewallet.com';\n\t\t}\n\t}\n};\n\n/**\n * Generates a connection string URL for a specified Tezos wallet application.\n *\n * @param walletApp - The Tezos wallet application for which the connection string URL is generated.\n * @param connectionString - The connection string to be used for the wallet connection.\n * @param genericWalletUrl - The generic wallet URL to be used if the wallet application is '_generic_'.\n * @returns The generated connection string URL for the specified wallet application.\n */\nexport const getConnectionStringUniversalLink = (\n\twalletApp: TezosBeaconWalletApp,\n\tconnectionString: string,\n\tgenericWalletUrl: string,\n): string => {\n\t// let encodedConnectionString = encodeURIComponent(connectionString);\n\n\t// // Double encode for Android\n\t// if (isAndroid() && walletApp !== '_generic_') {\n\t// \tencodedConnectionString = encodeURIComponent(encodedConnectionString);\n\t// }\n\n\tswitch (walletApp) {\n\t\tcase 'altme': {\n\t\t\treturn `https://app.altme.io/app/download?${connectionString.slice(9)}`;\n\t\t}\n\t\tcase 'kukai': {\n\t\t\treturn `https://connect.kukai.app?${connectionString.slice(9)}`;\n\t\t}\n\t\tcase 'temple': {\n\t\t\treturn `https://app.templewallet.com?${connectionString.slice(9)}`;\n\t\t}\n\t\tcase '_generic_': {\n\t\t\tconst url = new URL(genericWalletUrl);\n\t\t\turl.searchParams.append('uri', connectionString);\n\t\t\treturn url.toString();\n\t\t}\n\t}\n};\n\n/**\n * Checks if the given wallet application supports universal links.\n *\n * @param walletApp - The wallet application to check.\n * @returns `true` if the wallet application supports universal links, otherwise `false`.\n */\nexport const isUniversalLinkWallet = (walletApp: TezosBeaconWalletApp): boolean => {\n\tswitch (walletApp) {\n\t\tcase 'altme':\n\t\tcase 'kukai':\n\t\tcase 'temple': {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n"]}