{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { validateSchema, validateType } from '@tconnect.io/core';\nimport { TezosBeaconErrorResponse, TezosBeaconEvent, TezosBeaconResponse } from '@tconnect.io/tezos-beacon-api-types';\nimport Joi from 'joi';\nimport {\n\tBaseMessage,\n\tDisconnectMessage,\n\tErrorResponse,\n\tOperationResponse,\n\tPairingResponse,\n\tPermissionResponse,\n\tSignPayloadResponse,\n} from './types';\n\n/**\n * Validates a Tezos Beacon response or error response against a predefined schema.\n *\n * @param value - The Tezos Beacon response or error response to validate.\n * @returns The validated Tezos Beacon response or error response.\n *\n * The function uses Joi to validate the structure of the input value. The input value\n * can be one of the following types:\n * - An error response with a type of 'error' and a payload that can be either a generic error\n *   or an error with a specific type ('invalidSessionId', 'invalidApiKey').\n * - An initialization response with a type of 'init' and a payload containing a sessionId and\n *   a loginRawDigest.\n * - A login response with a type of 'login' and a payload containing a connectionString.\n * - A message response with a type of 'message'.\n * - A reconnect response with a type of 'reconnect'.\n * - A disconnect response with a type of 'disconnect'.\n */\nexport const validateTezosBeaconResponse = (\n\tvalue: TezosBeaconResponse | TezosBeaconErrorResponse,\n): TezosBeaconResponse | TezosBeaconErrorResponse =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives()\n\t\t\t.try(\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('error').required(),\n\t\t\t\t\tpayload: Joi.alternatives().try(\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('generic').required(),\n\t\t\t\t\t\t\tkey: Joi.string().required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow(''),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('invalidSessionId', 'invalidApiKey').required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow('').required(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('init').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tsessionId: Joi.string().required(),\n\t\t\t\t\t\tloginRawDigest: Joi.string().hex().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('login').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tconnectionString: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('message').required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('reconnect').required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.required(),\n\t);\n\n/**\n * Validates a TezosBeaconEvent object against predefined schemas.\n *\n * This function uses Joi to validate the provided value against two possible schemas:\n * - A schema for events of type 'message' with a required 'message' payload.\n * - A schema for events of type 'disconnect'.\n *\n * @param value - The TezosBeaconEvent object to validate.\n * @returns The validated TezosBeaconEvent object.\n *\n * @throws {ValidationError} If the provided value does not match any of the schemas.\n */\nexport const validateTezosBeaconEvent = (value: TezosBeaconEvent): TezosBeaconEvent =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives().try(\n\t\t\tJoi.object({\n\t\t\t\ttype: Joi.string().valid('message').required(),\n\t\t\t\tpayload: Joi.object({\n\t\t\t\t\tmessage: Joi.string().required(),\n\t\t\t\t}),\n\t\t\t}),\n\t\t\tJoi.object({\n\t\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\t}),\n\t\t),\n\t);\n\n/**\n * Validates if the given value conforms to the PeerInfo structure.\n *\n * The PeerInfo structure includes the following properties:\n * - `type`: A string that must be 'p2p-pairing-response'.\n * - `id`: A required string representing the peer's ID.\n * - `name`: A required string representing the peer's name.\n * - `version`: A required string representing the version.\n * - `publicKey`: A required string representing the peer's public key.\n * - `relayServer`: A required string representing the relay server.\n * - `appUrl`: An optional string representing the application URL, which can be empty.\n * - `icon`: An optional string representing the icon URL, which can be empty.\n *\n * @param value - The value to validate.\n * @returns A boolean indicating whether the value is a valid PairingResponse.\n */\nexport const isPairingResponse = (value: unknown): value is PairingResponse =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('p2p-pairing-response').required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tname: Joi.string().required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tpublicKey: Joi.string().required(),\n\t\t\trelayServer: Joi.string().required(),\n\t\t\tappUrl: Joi.string().allow(''),\n\t\t\ticon: Joi.string().allow(''),\n\t\t}),\n\t);\n\n/**\n * Validates if the given value is a BaseMessage.\n *\n * A BaseMessage is an object that contains the following properties:\n * - `type`: A string that must be one of the following values:\n *   - 'permission_request'\n *   - 'sign_payload_request'\n *   - 'operation_request'\n *   - 'broadcast_request'\n *   - 'permission_response'\n *   - 'sign_payload_response'\n *   - 'operation_response'\n *   - 'broadcast_response'\n *   - 'disconnect'\n *   - 'error'\n *   - 'acknowledge'\n * - `version`: A required string representing the version.\n * - `id`: A required string representing the ID.\n * - `senderId`: A required string representing the sender ID.\n *\n * @param value - The value to validate.\n * @returns A boolean indicating whether the value is a BaseMessage.\n */\nexport const isBaseMessage = (value: unknown): value is BaseMessage =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string()\n\t\t\t\t.valid(\n\t\t\t\t\t'permission_request',\n\t\t\t\t\t'sign_payload_request',\n\t\t\t\t\t'operation_request',\n\t\t\t\t\t'broadcast_request',\n\t\t\t\t\t'permission_response',\n\t\t\t\t\t'sign_payload_response',\n\t\t\t\t\t'operation_response',\n\t\t\t\t\t'broadcast_response',\n\t\t\t\t\t'disconnect',\n\t\t\t\t\t'error',\n\t\t\t\t\t'acknowledge',\n\t\t\t\t)\n\t\t\t\t.required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t}).options({ allowUnknown: true }),\n\t);\n\n/**\n * Validates if the given value conforms to the `PermissionResponse` type.\n *\n * @param value - The value to be validated.\n * @returns A boolean indicating whether the value is a valid `PermissionResponse`.\n */\nexport const isPermissionResponse = (value: unknown): value is PermissionResponse =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('permission_response').required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t\tpublicKey: Joi.string().required(),\n\t\t\tnetwork: Joi.object({\n\t\t\t\ttype: Joi.string().valid('mainnet', 'carthagenet', 'custom', 'ghostnet').required(),\n\t\t\t\tname: Joi.string().allow(''),\n\t\t\t\trpcUrl: Joi.string().allow(''),\n\t\t\t}).required(),\n\t\t\tscopes: Joi.array()\n\t\t\t\t.items(Joi.string().valid('sign', 'operation_request', 'threshold'))\n\t\t\t\t.required(),\n\t\t\tthreshold: Joi.object({\n\t\t\t\tamount: Joi.string().required(),\n\t\t\t\ttimeframe: Joi.string().required(),\n\t\t\t}),\n\t\t\tappMetadata: Joi.object({\n\t\t\t\tsenderId: Joi.string().required(),\n\t\t\t\tname: Joi.string().required(),\n\t\t\t\ticon: Joi.string().allow(''),\n\t\t\t}),\n\t\t}),\n\t);\n\n/**\n * Checks if the given value is an OperationResponse.\n *\n * @param value - The value to be checked.\n * @returns A boolean indicating whether the value is an OperationResponse.\n */\nexport const isOperationResponse = (value: unknown): value is OperationResponse =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('operation_response').required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t\ttransactionHash: Joi.string().required(),\n\t\t}),\n\t);\n\n/**\n * Validates if the given value is a SignPayloadResponse.\n *\n * @param value - The value to validate.\n * @returns A boolean indicating whether the value is a SignPayloadResponse.\n */\nexport const isSignPayloadResponse = (value: unknown): value is SignPayloadResponse =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('sign_payload_response').required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t\tsignature: Joi.string().required(),\n\t\t\tsigningType: Joi.string(), // 'raw'\n\t\t}),\n\t);\n\n/**\n * Checks if the given value is a DisconnectMessage.\n *\n * @param value - The value to be checked.\n * @returns A boolean indicating whether the value is a DisconnectMessage.\n */\nexport const isDisconnectMessage = (value: unknown): value is DisconnectMessage =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t}),\n\t);\n\n/**\n * Checks if the given value is an ErrorResponse.\n *\n * This function validates the structure of the value to ensure it matches the expected\n * ErrorResponse schema using Joi validation.\n *\n * @param value - The value to be checked.\n * @returns A boolean indicating whether the value is an ErrorResponse.\n */\nexport const isErrorResponse = (value: unknown): value is ErrorResponse =>\n\tvalidateType(\n\t\tvalue,\n\t\tJoi.object({\n\t\t\ttype: Joi.string().valid('error').required(),\n\t\t\tversion: Joi.string().required(),\n\t\t\tid: Joi.string().required(),\n\t\t\tsenderId: Joi.string().required(),\n\t\t\terrorType: Joi.string()\n\t\t\t\t.valid(\n\t\t\t\t\t'BROADCAST_ERROR',\n\t\t\t\t\t'NETWORK_NOT_SUPPORTED',\n\t\t\t\t\t'NO_ADDRESS_ERROR',\n\t\t\t\t\t'NO_PRIVATE_KEY_FOUND_ERROR',\n\t\t\t\t\t'NOT_GRANTED_ERROR',\n\t\t\t\t\t'PARAMETERS_INVALID_ERROR',\n\t\t\t\t\t'TOO_MANY_OPERATIONS',\n\t\t\t\t\t'TRANSACTION_INVALID_ERROR',\n\t\t\t\t\t'ABORTED_ERROR',\n\t\t\t\t\t'UNKNOWN_ERROR',\n\t\t\t\t)\n\t\t\t\t.required(),\n\t\t}),\n\t);\n"]}