{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"AAaA,MAAM,OAAO,YAAa,SAAQ,KAAK;IAOtC,YAAY,SAA+C,EAAE,OAAgB;QAC5E,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;CAQD;AAQD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAc,EAAyB,EAAE,CAAC,KAAK,YAAY,YAAY,CAAC","sourcesContent":["import { TezosWcErrorType } from './types';\n\n/**\n * Represents an error specific to the Tezos WalletConnect API.\n *\n * @class TezosWcError\n * @extends {Error}\n *\n * @param {Exclude<TezosWcErrorType, 'generic'>} errorType - The type of the error, excluding the 'generic' type.\n * @param {string} [message] - Optional error message providing more details about the error.\n *\n * @property {Exclude<TezosWcErrorType, 'generic'>} errorType - The type of the error.\n */\nexport class TezosWcError extends Error {\n\t/**\n\t * Constructs a new instance of the error with a specific type and optional message.\n\t *\n\t * @param errorType - The type of the error, excluding the 'generic' type.\n\t * @param message - An optional message providing more details about the error.\n\t */\n\tconstructor(errorType: Exclude<TezosWcErrorType, 'generic'>, message?: string) {\n\t\tsuper(message);\n\t\tthis.errorType = errorType;\n\t}\n\n\t/**\n\t * Represents the specific type of Tezos WalletConnect error, excluding the generic error type.\n\t *\n\t * @type {Exclude<TezosWcErrorType, 'generic'>}\n\t */\n\treadonly errorType: Exclude<TezosWcErrorType, 'generic'>;\n}\n\n/**\n * Type guard function to check if an error is an instance of `TezosWcError`.\n *\n * @param error - The error to check.\n * @returns A boolean indicating whether the error is an instance of `TezosWcError`.\n */\nexport const isTezosWcError = (error: unknown): error is TezosWcError => error instanceof TezosWcError;\n"]}