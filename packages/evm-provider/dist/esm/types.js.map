{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ProviderRpcError } from './ProviderRpcError';\n\n/**\n * Represents the supported EVM wallet applications.\n *\n * @typedef {('bitget' | 'metaMask' | 'safePal' | 'trust')} EvmWalletApp\n *\n * @property {'bitget'} bitget - Bitget wallet application.\n * @property {'metaMask'} metaMask - MetaMask wallet application.\n * @property {'safePal'} safePal - SafePal wallet application.\n * @property {'trust'} trust - Trust wallet application.\n */\nexport type EvmWalletApp = 'bitget' | 'metaMask' | 'safePal' | 'trust';\n\n/**\n * Represents the possible event names for EIP-1193 compliant providers.\n *\n * @typedef {('connect' | 'disconnect' | 'message' | 'chainChanged' | 'accountsChanged')} Eip1193EventName\n *\n * @property {'connect'} connect - Emitted when the provider connects to a network.\n * @property {'disconnect'} disconnect - Emitted when the provider disconnects from a network.\n * @property {'message'} message - Emitted when a message is received from the provider.\n * @property {'chainChanged'} chainChanged - Emitted when the chain ID of the provider changes.\n * @property {'accountsChanged'} accountsChanged - Emitted when the accounts managed by the provider change.\n */\nexport type Eip1193EventName = 'connect' | 'disconnect' | 'message' | 'chainChanged' | 'accountsChanged';\n\n/**\n * Represents the arguments for a request.\n */\nexport interface RequestArguments {\n\treadonly method: string;\n\treadonly params?: readonly unknown[] | object;\n}\n\n/**\n * Represents information about the connection to an Ethereum provider.\n *\n * @property {string} chainId - The unique identifier of the blockchain network.\n */\nexport interface ProviderConnectInfo {\n\treadonly chainId: string;\n}\n\n/**\n * Represents a message sent by the provider.\n *\n * @interface ProviderMessage\n *\n * @property {string} type - The type of the message.\n * @property {unknown} data - The data associated with the message.\n */\nexport interface ProviderMessage {\n\treadonly type: string;\n\treadonly data: unknown;\n}\n\n/**\n * Interface representing the events emitted by an EIP-1193 compliant provider.\n */\nexport interface EIP1193ProviderEvents {\n\t/**\n\t * Emitted when the provider connects to a network.\n\t * @event\n\t */\n\tconnect: ProviderConnectInfo;\n\n\t/**\n\t * Emitted when the provider disconnects from a network.\n\t * @event\n\t */\n\tdisconnect: ProviderRpcError;\n\n\t/**\n\t * Emitted when a message is received from the provider.\n\t * @event\n\t */\n\tmessage: ProviderMessage;\n\n\t/**\n\t * Emitted when the chain ID of the provider changes.\n\t * @event\n\t */\n\tchainChanged: string;\n\n\t/**\n\t * Emitted when the accounts managed by the provider change.\n\t * @event\n\t */\n\taccountsChanged: Array<string>;\n}\n\n/**\n * Represents an EIP-1193 compliant provider.\n *\n * This interface defines the standard methods and events that an Ethereum provider should implement.\n */\nexport interface EIP1193Provider {\n\t/**\n\t * Sends a request to the provider.\n\t *\n\t * @param request - The request object containing the method and parameters.\n\t * @returns A promise that resolves with the result of the request.\n\t */\n\trequest(request: RequestArguments): Promise<unknown>;\n\n\t/**\n\t * Registers an event listener for the specified event.\n\t *\n\t * @param event - The name of the event to listen for.\n\t * @param listener - The callback function to handle the event.\n\t */\n\ton(event: 'connect', listener: (connectInfo: ProviderConnectInfo) => void): void;\n\ton(event: 'disconnect', listener: (error: ProviderRpcError) => void): void;\n\ton(event: 'message', listener: (message: ProviderMessage) => void): void;\n\ton(event: 'chainChanged', listener: (chainId: string) => void): void;\n\ton(event: 'accountsChanged', listener: (accounts: Array<string>) => void): void;\n\n\t/**\n\t * Removes a previously registered event listener for the specified event.\n\t *\n\t * @param event - The name of the event.\n\t * @param listener - The callback function to remove.\n\t */\n\tremoveListener(event: 'connect', listener: (connectInfo: ProviderConnectInfo) => void): void;\n\tremoveListener(event: 'disconnect', listener: (error: ProviderRpcError) => void): void;\n\tremoveListener(event: 'message', listener: (message: ProviderMessage) => void): void;\n\tremoveListener(event: 'chainChanged', listener: (chainId: string) => void): void;\n\tremoveListener(event: 'accountsChanged', listener: (accounts: Array<string>) => void): void;\n}\n\n/**\n * Interface representing the events for connecting to an EVM provider.\n * Extends the standard EIP1193 provider events.\n *\n * @extends EIP1193ProviderEvents\n *\n * @property {string} connectionString - The connection string used to connect to the EVM provider.\n */\nexport interface TConnectEvmProviderEvents extends EIP1193ProviderEvents {\n\tconnectionString: string;\n}\n\n/**\n * Options for connecting to an EVM provider.\n *\n * @property {string} bridgeUrl - The URL of the bridge to connect to.\n * @property {string} apiKey - The API key for authentication.\n * @property {EvmWalletApp} [walletApp] - Optional wallet application to use.\n */\nexport interface TConnectEvmProviderOptions {\n\tappName: string;\n\tappUrl: string;\n\tappIcon?: string;\n\tbridgeUrl: string;\n\tapiKey: string;\n\twalletApp?: EvmWalletApp;\n}\n\n/**\n * Represents a serialized TConnect EVM provider.\n */\nexport interface SerializedTConnectEvmProvider {\n\t/**\n\t * The name of the application.\n\t */\n\tappName: string;\n\n\t/**\n\t * The URL of the application.\n\t */\n\tappUrl: string;\n\n\tappIcon: string | undefined;\n\n\t/**\n\t * The URL of the bridge used for communication.\n\t */\n\tbridgeUrl: string;\n\n\t/**\n\t * The wallet application used for EVM interactions.\n\t */\n\twalletApp: EvmWalletApp | undefined;\n\n\t/**\n\t * The API key for authentication.\n\t */\n\t_apiKey: string;\n\n\t/**\n\t * The communication controller identifier.\n\t */\n\t_communicationController: string;\n\n\t/**\n\t * The session identifier.\n\t */\n\t_sessionId: string;\n\n\t/**\n\t * The URI for WalletConnect.\n\t */\n\t_connectionString: string;\n}\n"]}