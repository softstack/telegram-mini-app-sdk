{"version":3,"file":"TConnectEvmProvider.js","sourceRoot":"","sources":["../../src/TConnectEvmProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAndroid } from '@tconnect.io/browser-utils';\nimport { parse, sleep, stringify, TypedEvent } from '@tconnect.io/core';\nimport { CommunicationController } from '@tconnect.io/dapp-communication';\nimport {\n\tEVENT_CHANNEL,\n\tEvmConnectedRequest,\n\tEvmConnectedResponse,\n\tEvmConnectRequest,\n\tEvmConnectResponse,\n\tEvmDisconnectRequest,\n\tEvmDisconnectResponse,\n\tEvmError,\n\tEvmEvent,\n\tEvmReconnectRequest,\n\tEvmReconnectResponse,\n\tEvmRequest,\n\tEvmRequestRequest,\n\tEvmRequestResponse,\n\tEvmResponse,\n\tREQUEST_CHANNEL,\n} from '@tconnect.io/evm-api-types';\nimport WebApp from '@twa-dev/sdk';\nimport { SOCKET_IO_PATH } from './constants';\nimport { ProviderRpcError } from './ProviderRpcError';\nimport {\n\tEIP1193Provider,\n\tEvmWalletApp,\n\tRequestArguments,\n\tSerializedTConnectEvmProvider,\n\tTConnectEvmProviderEvents,\n\tTConnectEvmProviderOptions,\n} from './types';\nimport { getUniversalLink, getWalletConnectUniversalLink } from './utils';\nimport { validateEvmEvent, validateEvmResponse } from './validation';\n\nexport class TConnectEvmProvider extends TypedEvent<TConnectEvmProviderEvents> implements EIP1193Provider {\n\tconstructor(options: TConnectEvmProviderOptions) {\n\t\tsuper();\n\t\tthis.bridgeUrl = options.bridgeUrl;\n\t\tthis.walletApp = options?.walletApp;\n\t\tthis._apiKey = options.apiKey;\n\t\tthis._communicationController = new CommunicationController(\n\t\t\tthis.bridgeUrl,\n\t\t\tSOCKET_IO_PATH,\n\t\t\tREQUEST_CHANNEL,\n\t\t\tEVENT_CHANNEL,\n\t\t);\n\t}\n\n\treadonly bridgeUrl: string;\n\treadonly walletApp: EvmWalletApp | undefined;\n\n\tprivate readonly _apiKey: string;\n\tprivate _communicationController: CommunicationController<EvmRequest, EvmResponse, EvmEvent>;\n\tprivate _sessionId: string | undefined;\n\tprivate _walletConnectUri: string | undefined;\n\n\tasync connect(): Promise<void> {\n\t\tif (this._communicationController.connected()) {\n\t\t\tawait this.disconnect();\n\t\t}\n\t\tawait this._communicationController.connect();\n\n\t\tthis._communicationController.on('event', this._createEvmEventHandler());\n\n\t\tconst {\n\t\t\tpayload: { sessionId, walletConnectUri },\n\t\t} = await this._sendEvmRequest({\n\t\t\ttype: 'connect',\n\t\t\tpayload: { apiKey: this._apiKey },\n\t\t});\n\t\tthis._sessionId = sessionId;\n\t\tthis._walletConnectUri = walletConnectUri;\n\t\tif (this.walletApp) {\n\t\t\t// Android needs a second reminder to open the link\n\t\t\tif (isAndroid()) {\n\t\t\t\tWebApp.openLink(getWalletConnectUniversalLink(this.walletApp, walletConnectUri), { try_instant_view: true });\n\t\t\t\tawait sleep(1000);\n\t\t\t\tWebApp.openLink(getWalletConnectUniversalLink(this.walletApp, walletConnectUri), { try_instant_view: true });\n\t\t\t} else {\n\t\t\t\tWebApp.openLink(getWalletConnectUniversalLink(this.walletApp, walletConnectUri));\n\t\t\t}\n\t\t}\n\t\tthis.emit('connectionString', walletConnectUri);\n\t}\n\n\tasync connected(): Promise<boolean> {\n\t\tif (!this._sessionId || !this._communicationController.connected()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst response = await this._sendEvmRequest({\n\t\t\ttype: 'connected',\n\t\t\tsessionId: this._getSessionId(),\n\t\t});\n\t\treturn response.payload.connected;\n\t}\n\n\tasync request(args: RequestArguments): Promise<unknown> {\n\t\tif (this.walletApp && this.walletApp !== 'bitget') {\n\t\t\tswitch (args.method) {\n\t\t\t\tcase 'eth_sendTransaction':\n\t\t\t\tcase 'eth_sign':\n\t\t\t\tcase 'eth_signTransaction':\n\t\t\t\tcase 'eth_signTypedData':\n\t\t\t\tcase 'eth_signTypedData_v3':\n\t\t\t\tcase 'eth_signTypedData_v4':\n\t\t\t\tcase 'personal_sign': {\n\t\t\t\t\tWebApp.openLink(getUniversalLink(this.walletApp));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst response = (await this._communicationController.send({\n\t\t\ttype: 'request',\n\t\t\tsessionId: this._getSessionId(),\n\t\t\tpayload: args,\n\t\t})) as EvmRequestResponse;\n\t\treturn response.payload;\n\t}\n\n\tasync disconnect(): Promise<void> {\n\t\ttry {\n\t\t\tawait this._communicationController.send({ type: 'disconnect', sessionId: this._getSessionId() });\n\t\t} finally {\n\t\t\tthis.emit('disconnect', new ProviderRpcError('Disconnected', 4900));\n\t\t\tthis._communicationController.disconnect();\n\t\t}\n\t}\n\n\tserialize(): string {\n\t\treturn stringify({\n\t\t\tbridgeUrl: this.bridgeUrl,\n\t\t\twalletApp: this.walletApp,\n\t\t\t_apiKey: this._apiKey,\n\t\t\t_communicationController: this._communicationController.serialize(),\n\t\t\t_sessionId: this._getSessionId(),\n\t\t\t_walletConnectUri: this._getWalletConnectUri(),\n\t\t} satisfies SerializedTConnectEvmProvider);\n\t}\n\n\tstatic async deserialize(serialized: string): Promise<TConnectEvmProvider> {\n\t\tconst data = parse(serialized) as SerializedTConnectEvmProvider;\n\t\tconst provider = new TConnectEvmProvider({\n\t\t\tbridgeUrl: data.bridgeUrl,\n\t\t\tapiKey: data._apiKey,\n\t\t\twalletApp: data.walletApp,\n\t\t});\n\t\tprovider._communicationController = CommunicationController.deserialize(data._communicationController);\n\t\tprovider._sessionId = data._sessionId;\n\t\tprovider._walletConnectUri = data._walletConnectUri;\n\t\tawait provider._reconnect();\n\t\treturn provider;\n\t}\n\n\tprivate async _reconnect(): Promise<void> {\n\t\tthis._communicationController.on('event', this._createEvmEventHandler());\n\t\tawait this._communicationController.connect();\n\t\tawait this._sendEvmRequest({ type: 'reconnect', sessionId: this._getSessionId() });\n\t}\n\n\tprivate _createEvmEventHandler() {\n\t\treturn (event: EvmEvent): void => {\n\t\t\ttry {\n\t\t\t\tconst validatedEvent = validateEvmEvent(event);\n\t\t\t\tswitch (validatedEvent.type) {\n\t\t\t\t\tcase 'connect': {\n\t\t\t\t\t\tthis.emit('connect', validatedEvent.payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'message': {\n\t\t\t\t\t\tthis.emit('message', validatedEvent.payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'chainChanged': {\n\t\t\t\t\t\tthis.emit('chainChanged', validatedEvent.payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'accountsChanged': {\n\t\t\t\t\t\tthis.emit('accountsChanged', validatedEvent.payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'disconnect': {\n\t\t\t\t\t\tconst { message, code, data } = validatedEvent.payload;\n\t\t\t\t\t\tthis.emit('disconnect', new ProviderRpcError(message, code, data));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async _sendEvmRequest(evmRequest: EvmConnectRequest): Promise<EvmConnectResponse>;\n\tprivate async _sendEvmRequest(evmRequest: EvmConnectedRequest): Promise<EvmConnectedResponse>;\n\tprivate async _sendEvmRequest(evmRequest: EvmRequestRequest): Promise<EvmRequestResponse>;\n\tprivate async _sendEvmRequest(evmRequest: EvmReconnectRequest): Promise<EvmReconnectResponse>;\n\tprivate async _sendEvmRequest(evmRequest: EvmDisconnectRequest): Promise<EvmDisconnectResponse>;\n\tprivate async _sendEvmRequest(evmRequest: EvmRequest): Promise<EvmResponse> {\n\t\tif (!this._communicationController.connected()) {\n\t\t\tthrow new Error(\"Can't send request without connection\");\n\t\t}\n\t\tconst evmResponse = await this._communicationController.send(evmRequest);\n\t\tconst validatedEvmResponse = validateEvmResponse(evmResponse);\n\t\tif (validatedEvmResponse.type === 'error') {\n\t\t\tif (validatedEvmResponse.payload.type === 'generic') {\n\t\t\t\tlet errorMessage = `Error Code: ${validatedEvmResponse.payload.key}`;\n\t\t\t\tif (validatedEvmResponse.payload.message) {\n\t\t\t\t\terrorMessage += `: ${validatedEvmResponse.payload.message}`;\n\t\t\t\t}\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t} else {\n\t\t\t\tthrow new EvmError(validatedEvmResponse.payload.type, validatedEvmResponse.payload.message);\n\t\t\t}\n\t\t}\n\t\tif (evmRequest.type !== validatedEvmResponse.type) {\n\t\t\tthrow new Error('Response type is different from request type');\n\t\t}\n\t\treturn evmResponse;\n\t}\n\n\tprivate _getSessionId(): string {\n\t\tif (!this._sessionId) {\n\t\t\tthrow new Error('Session ID is not set');\n\t\t}\n\t\treturn this._sessionId;\n\t}\n\n\tprivate _getWalletConnectUri(): string {\n\t\tif (!this._walletConnectUri) {\n\t\t\tthrow new Error('WalletConnect URI is not set');\n\t\t}\n\t\treturn this._walletConnectUri;\n\t}\n}\n"]}