{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAA,wDAAoD;AAe7C,MAAM,gBAAgB,GAAG,CAAC,SAA6B,EAAU,EAAE;IACzE,QAAQ,SAAS,EAAE,CAAC;QACnB,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,OAAO,cAAc,CAAC;QACvB,CAAC;QACD,KAAK,UAAU,CAAC,CAAC,CAAC;YACjB,OAAO,2BAA2B,CAAC;QACpC,CAAC;QACD,KAAK,SAAS,CAAC,CAAC,CAAC;YAChB,OAAO,yBAAyB,CAAC;QAClC,CAAC;QACD,KAAK,OAAO,CAAC,CAAC,CAAC;YACd,OAAO,YAAY,CAAC;QACrB,CAAC;IACF,CAAC;AACF,CAAC,CAAC;AAfW,QAAA,gBAAgB,oBAe3B;AAUK,MAAM,gCAAgC,GAAG,CAAC,SAA6B,EAAE,gBAAwB,EAAU,EAAE;IACnH,IAAI,uBAAuB,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IAGnE,IAAI,IAAA,sBAAS,GAAE,EAAE,CAAC;QACjB,uBAAuB,GAAG,kBAAkB,CAAC,uBAAuB,CAAC,CAAC;IACvE,CAAC;IAED,QAAQ,SAAS,EAAE,CAAC;QACnB,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,OAAO,4BAA4B,uBAAuB,EAAE,CAAC;QAC9D,CAAC;QACD,KAAK,UAAU,CAAC,CAAC,CAAC;YACjB,OAAO,oCAAoC,uBAAuB,EAAE,CAAC;QACtE,CAAC;QACD,KAAK,SAAS,CAAC,CAAC,CAAC;YAChB,OAAO,kCAAkC,uBAAuB,EAAE,CAAC;QACpE,CAAC;QACD,KAAK,OAAO,CAAC,CAAC,CAAC;YACd,OAAO,kBAAkB,uBAAuB,EAAE,CAAC;QACpD,CAAC;IACF,CAAC;AACF,CAAC,CAAC;AAtBW,QAAA,gCAAgC,oCAsB3C","sourcesContent":["import { isAndroid } from '@tconnect.io/dapp-utils';\nimport { EtherlinkWalletApp } from './types';\n\n/**\n * Returns the universal link for the specified Etherlink wallet application.\n *\n * @param walletApp - The Etherlink wallet application for which to get the universal link.\n * @returns The universal link as a string.\n *\n * @example\n * ```typescript\n * const link = getUniversalLink('metaMask');\n * console.log(link); // Output: 'https://metamask.app.link'\n * ```\n */\nexport const getUniversalLink = (walletApp: EtherlinkWalletApp): string => {\n\tswitch (walletApp) {\n\t\tcase 'bitget': {\n\t\t\treturn 'bitkeep://wc';\n\t\t}\n\t\tcase 'metaMask': {\n\t\t\treturn 'https://metamask.app.link';\n\t\t}\n\t\tcase 'safePal': {\n\t\t\treturn 'https://link.safepal.io';\n\t\t}\n\t\tcase 'trust': {\n\t\t\treturn 'trust://wc';\n\t\t}\n\t}\n};\n\n/**\n * Generates a universal link for WalletConnect based on the specified wallet application and WalletConnect URI.\n *\n * @param walletApp - The wallet application for which the universal link is being generated.\n *                    Supported values are 'bitget', 'metaMask', 'safePal', and 'trust'.\n * @param connectionString - The WalletConnect URI to be encoded and included in the universal link.\n * @returns The universal link for the specified wallet application with the encoded WalletConnect URI.\n */\nexport const getConnectionStringUniversalLink = (walletApp: EtherlinkWalletApp, connectionString: string): string => {\n\tlet encodedConnectionString = encodeURIComponent(connectionString);\n\n\t// Double encode for Android\n\tif (isAndroid()) {\n\t\tencodedConnectionString = encodeURIComponent(encodedConnectionString);\n\t}\n\n\tswitch (walletApp) {\n\t\tcase 'bitget': {\n\t\t\treturn `https://bkapp.vip/wc?uri=${encodedConnectionString}`;\n\t\t}\n\t\tcase 'metaMask': {\n\t\t\treturn `https://metamask.app.link/wc?uri=${encodedConnectionString}`;\n\t\t}\n\t\tcase 'safePal': {\n\t\t\treturn `https://link.safepal.io/wc?uri=${encodedConnectionString}`;\n\t\t}\n\t\tcase 'trust': {\n\t\t\treturn `trust://wc?uri=${encodedConnectionString}`;\n\t\t}\n\t}\n};\n"]}