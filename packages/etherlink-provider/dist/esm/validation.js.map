{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { validateSchema } from '@tconnect.io/core';\nimport { EtherlinkErrorResponse, EtherlinkEvent, EtherlinkResponse } from '@tconnect.io/etherlink-api-types';\nimport Joi from 'joi';\n\n/**\n * Validates an Etherlink response object against a predefined schema.\n *\n * The function checks if the provided value matches one of the allowed schemas\n * for Etherlink responses or Etherlink error responses. The schemas include various types\n * of responses such as 'error', 'connect', 'connected', 'request', 'reconnect',\n * and 'disconnect', each with their own specific payload requirements.\n *\n * @param value - The Etherlink response or error response to validate.\n * @returns The validated Etherlink response or error response.\n *\n * @example\n * ```typescript\n * const response = {\n *   type: 'connect',\n *   payload: {\n *     sessionId: '12345',\n *   },\n * };\n * const validatedResponse = validateEtherlinkResponse(response);\n * ```\n */\nexport const validateEtherlinkResponse = (\n\tvalue: EtherlinkResponse | EtherlinkErrorResponse,\n): EtherlinkResponse | EtherlinkErrorResponse =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives()\n\t\t\t.try(\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('error').required(),\n\t\t\t\t\tpayload: Joi.alternatives().try(\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('generic').required(),\n\t\t\t\t\t\t\tkey: Joi.string().required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow(''),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tJoi.object({\n\t\t\t\t\t\t\ttype: Joi.string().valid('invalidSessionId', 'walletRequestFailed', 'invalidApiKey').required(),\n\t\t\t\t\t\t\tmessage: Joi.string().allow('').required(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connect').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tsessionId: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connected').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tconnected: Joi.boolean().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('request').required(),\n\t\t\t\t\tpayload: Joi.any(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('reconnect').required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.required(),\n\t);\n\n/**\n * Validates an EtherlinkEvent object against predefined schemas.\n *\n * The function checks if the provided `value` matches one of the following schemas:\n * - `connect`: An object with a `type` of 'connect' and a `payload` containing a `chainId` string.\n * - `message`: An object with a `type` of 'message' and a `payload` containing a `type` string and `data` of any type.\n * - `chainChanged`: An object with a `type` of 'chainChanged' and a `payload` string.\n * - `accountsChanged`: An object with a `type` of 'accountsChanged' and a `payload` array of strings.\n * - `disconnect`: An object with a `type` of 'disconnect' and a `payload` containing a `message` string, a `code` number, and `data` of any type.\n *\n * @param value - The EtherlinkEvent object to validate.\n * @returns The validated EtherlinkEvent object.\n * @throws Will throw an error if the `value` does not match any of the predefined schemas.\n */\nexport const validateEtherlinkEvent = (value: EtherlinkEvent): EtherlinkEvent =>\n\tvalidateSchema(\n\t\tvalue,\n\t\tJoi.alternatives()\n\t\t\t.try(\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connectionString').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tconnectionString: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('connect').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tchainId: Joi.string().required(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('message').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\ttype: Joi.string().required(),\n\t\t\t\t\t\tdata: Joi.any(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('chainChanged').required(),\n\t\t\t\t\tpayload: Joi.string().required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('accountsChanged').required(),\n\t\t\t\t\tpayload: Joi.array().items(Joi.string()).required(),\n\t\t\t\t}),\n\t\t\t\tJoi.object({\n\t\t\t\t\ttype: Joi.string().valid('disconnect').required(),\n\t\t\t\t\tpayload: Joi.object({\n\t\t\t\t\t\tmessage: Joi.string().required(),\n\t\t\t\t\t\tcode: Joi.number().required(),\n\t\t\t\t\t\tdata: Joi.any(),\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.required(),\n\t);\n"]}